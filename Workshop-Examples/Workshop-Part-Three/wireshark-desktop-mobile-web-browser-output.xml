<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.1 (Python 3.7.5 on darwin)" generated="20200715 20:28:36.319" rpa="false">
<suite id="s1" name="Robot Framework Wireshark Desktop And Mobile Browser Test Run">
<suite id="s1-s1" name="Wireshark-Desktop-Example" source="/Users/jgorospe/Documents/GitHub/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019-Web-Proxies-Network-Packet-Analyzers/Workshop-Examples/Tests/Workshop-Part-Two/Wireshark-Desktop-Example.robot">
<kw name="Stop Any Running Android Emulators And Related Processes On MacOS" library="Selenium-Desktop-Resources" type="setup">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>ANDROID_EMULATOR_PID=$(cat ./Workshop-Examples/Shared-Resources/android_emulator_PID.txt) &amp;&amp; kill -s 9 $ANDROID_EMULATOR_PID</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>ANDROID_EMULATOR_PID=$(cat ./Workshop-Examples/Shared-Resources/android_emulator_PID.txt) &amp;&amp; kill -s 9 $ANDROID_EMULATOR_PID</arg>
</arguments>
<msg timestamp="20200715 20:28:36.628" level="INFO">Running command 'ANDROID_EMULATOR_PID=$(cat ./Workshop-Examples/Shared-Resources/android_emulator_PID.txt) &amp;&amp; kill -s 9 $ANDROID_EMULATOR_PID 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:28:36.625" endtime="20200715 20:28:36.635"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:36.625" endtime="20200715 20:28:36.635"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>pgrep emulator | xargs kill</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>pgrep emulator | xargs kill</arg>
</arguments>
<msg timestamp="20200715 20:28:36.642" level="INFO">Running command 'pgrep emulator | xargs kill 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:28:36.637" endtime="20200715 20:28:36.728"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:36.636" endtime="20200715 20:28:36.728"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>pgrep avd | xargs kill</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>pgrep avd | xargs kill</arg>
</arguments>
<msg timestamp="20200715 20:28:36.732" level="INFO">Running command 'pgrep avd | xargs kill 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:28:36.730" endtime="20200715 20:28:36.779"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:36.729" endtime="20200715 20:28:36.779"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>adb kill-server</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>adb kill-server</arg>
</arguments>
<msg timestamp="20200715 20:28:36.783" level="INFO">Running command 'adb kill-server 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:28:36.780" endtime="20200715 20:28:36.799"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:36.780" endtime="20200715 20:28:36.799"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall qemu-system-i386</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall qemu-system-i386</arg>
</arguments>
<msg timestamp="20200715 20:28:36.804" level="INFO">Running command 'killall qemu-system-i386 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:28:36.801" endtime="20200715 20:28:36.829"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:36.800" endtime="20200715 20:28:36.829"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall adb</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall adb</arg>
</arguments>
<msg timestamp="20200715 20:28:36.833" level="INFO">Running command 'killall adb 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:28:36.830" endtime="20200715 20:28:36.856"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:36.830" endtime="20200715 20:28:36.856"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:36.625" endtime="20200715 20:28:36.856"></status>
</kw>
<test id="s1-s1-t1" name="Go to a YouTube page in a MacOS desktop browser while Wireshark is capturing packets on WiFi, then check the Loopback Interface.">
<kw name="Navigate To Website Using Firefox Then Run Wireshark" type="setup">
<kw name="Terminate Wireshark Processes Multiple Times">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Repeat Keyword</arg>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<msg timestamp="20200715 20:28:36.861" level="INFO">Repeating keyword, round 1/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:28:36.861" endtime="20200715 20:28:36.999"></status>
</kw>
<msg timestamp="20200715 20:28:36.999" level="INFO">Repeating keyword, round 2/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:28:37.000" endtime="20200715 20:28:37.125"></status>
</kw>
<msg timestamp="20200715 20:28:37.125" level="INFO">Repeating keyword, round 3/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:28:37.125" endtime="20200715 20:28:37.276"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:36.860" endtime="20200715 20:28:37.277"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:36.860" endtime="20200715 20:28:37.277"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall tshark</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall tshark</arg>
</arguments>
<msg timestamp="20200715 20:28:37.282" level="INFO">Running command 'killall tshark 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:28:37.278" endtime="20200715 20:28:37.304"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:37.277" endtime="20200715 20:28:37.304"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20200715 20:28:42.306" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20200715 20:28:37.305" endtime="20200715 20:28:42.306"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:36.859" endtime="20200715 20:28:42.307"></status>
</kw>
<kw name="Open The Firefox Browser In MacOS After Wireshark Clean Up">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Set Up Firefox In MacOS Before Starting Wireshark</arg>
<arg>${WIRESHARK_SELENIUM_EXAMPLE_URL}</arg>
<arg>${WIRESHARK_SELENIUM_BROWSER}</arg>
</arguments>
<kw name="Set Up Firefox In MacOS Before Starting Wireshark" library="Selenium-Desktop-Resources">
<arguments>
<arg>${WIRESHARK_SELENIUM_EXAMPLE_URL}</arg>
<arg>${WIRESHARK_SELENIUM_BROWSER}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ps aux | grep "[t]shark"</arg>
<arg>alias=wireshark_mac_os_status</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200715 20:28:42.311" level="INFO">Starting process:
ps aux | grep "[t]shark"</msg>
<msg timestamp="20200715 20:28:42.317" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200715 20:28:42.523" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200715 20:28:42.310" endtime="20200715 20:28:42.524"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>wireshark_mac_os_status</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${WIRESHARK_MAC_OS_STATUS}</var>
</assign>
<msg timestamp="20200715 20:28:42.526" level="INFO">${WIRESHARK_MAC_OS_STATUS} = </msg>
<status status="PASS" starttime="20200715 20:28:42.524" endtime="20200715 20:28:42.526"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${WIRESHARK_MAC_OS_STATUS}</arg>
</arguments>
<msg timestamp="20200715 20:28:42.527" level="INFO"></msg>
<status status="PASS" starttime="20200715 20:28:42.526" endtime="20200715 20:28:42.527"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${WIRESHARK_MAC_OS_STATUS}</arg>
<arg>tshark</arg>
</arguments>
<status status="PASS" starttime="20200715 20:28:42.527" endtime="20200715 20:28:42.528"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Open Browser</arg>
<arg>${WIRESHARK_SELENIUM_EXAMPLE_URL}</arg>
<arg>${WIRESHARK_SELENIUM_BROWSER}</arg>
</arguments>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WIRESHARK_SELENIUM_EXAMPLE_URL}</arg>
<arg>${WIRESHARK_SELENIUM_BROWSER}</arg>
</arguments>
<msg timestamp="20200715 20:28:42.529" level="INFO">Opening browser 'Firefox' to base url 'https://www.youtube.com/watch?v=wBhY5Z2RoqQ&amp;feature=youtu.be&amp;autoplay=1'.</msg>
<msg timestamp="20200715 20:28:42.534" level="INFO">Firefox driver log is always forced to to: /Users/jgorospe/Documents/GitHub/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019-Web-Proxies-Network-Packet-Analyzers/Workshop-Examples/Workshop-Part-Three/geckodriver-113.log</msg>
<status status="PASS" starttime="20200715 20:28:42.529" endtime="20200715 20:28:47.944"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:42.528" endtime="20200715 20:28:47.944"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4s</arg>
</arguments>
<msg timestamp="20200715 20:28:51.946" level="INFO">Slept 4 seconds</msg>
<status status="PASS" starttime="20200715 20:28:47.945" endtime="20200715 20:28:51.946"></status>
</kw>
<timeout value="4 minutes"></timeout>
<status status="PASS" starttime="20200715 20:28:42.309" endtime="20200715 20:28:51.947"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:42.308" endtime="20200715 20:28:51.947"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:42.307" endtime="20200715 20:28:51.948"></status>
</kw>
<kw name="Press Keys" library="SeleniumLibrary">
<doc>Simulates the user pressing key(s) to an element or on the active browser.</doc>
<arguments>
<arg>None</arg>
<arg>k</arg>
</arguments>
<msg timestamp="20200715 20:28:51.949" level="INFO">Sending key(s) ('k',) to page.</msg>
<msg timestamp="20200715 20:28:51.949" level="INFO">Sending key k</msg>
<status status="PASS" starttime="20200715 20:28:51.948" endtime="20200715 20:28:51.981"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:36.859" endtime="20200715 20:28:51.981"></status>
</kw>
<kw name="Run Wireshark Live Packet Capture For Loopback Interface Lo0 And Check The Output">
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Wireshark Live Interface Packet Capture</arg>
<arg>lo0</arg>
<arg>5</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${WIRESHARK_LIVE_CAPTURE_OUTPUT}</var>
</assign>
<kw name="Wireshark Live Interface Packet Capture" library="WiresharkExample">
<arguments>
<arg>lo0</arg>
<arg>5</arg>
<arg>5</arg>
</arguments>
<msg timestamp="20200715 20:28:57.383" level="INFO">Total amount:  &lt;LiveCapture (2 packets)&gt;
Recently captured through the live interface:  Packet (Length: 68)
Layer NULL:
	Family: IP (2)
Layer IP:
	0100 .... = Version: 4
	.... 0101 = Header Length: 20 bytes (5)
	Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)
	0000 00.. = Differentiated Services Codepoint: Default (0)
	.... ..00 = Explicit Congestion Notification: Not ECN-Capable Transport (0)
	Total Length: 64
	Identification: 0x0000 (0)
	Flags: 0x4000, Don't fragment
	0... .... .... .... = Reserved bit: Not set
	.1.. .... .... .... = Don't fragment: Set
	..0. .... .... .... = More fragments: Not set
	Fragment offset: 0
	Time to live: 64
	Protocol: TCP (6)
	Header checksum: 0x0000 [validation disabled]
	Header checksum status: Unverified
	Source: 127.0.0.1
	Destination: 127.0.0.1
Layer TCP:
	Source Port: 49398
	Destination Port: 5037
	Stream index: 0
	TCP Segment Len: 0
	Sequence number: 0    (relative sequence number)
	Sequence number (raw): 2457077746
	Next sequence number: 1    (relative sequence number)
	Acknowledgment number: 0
	Acknowledgment number (raw): 0
	1011 .... = Header Length: 44 bytes (11)
	Flags: 0x002 (SYN)
	000. .... .... = Reserved: Not set
	...0 .... .... = Nonce: Not set
	.... 0... .... = Congestion Window Reduced (CWR): Not set
	.... .0.. .... = ECN-Echo: Not set
	.... ..0. .... = Urgent: Not set
	.... ...0 .... = Acknowledgment: Not set
	.... .... 0... = Push: Not set
	.... .... .0.. = Reset: Not set
	.... .... ..1. = Syn: Set
	Expert Info (Chat/Sequence): Connection establish request (SYN): server port 5037
	Connection establish request (SYN): server port 5037
	Severity level: Chat
	Group: Sequence
	.... .... ...0 = Fin: Not set
	TCP Flags: \xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7S\xc2\xb7
	Window size value: 65535
	Calculated window size: 65535
	Checksum: 0xfe34 [unverified]
	Checksum Status: Unverified
	Urgent pointer: 0
	Options: (24 bytes), Maximum segment size, No-Operation (NOP), Window scale, No-Operation (NOP), No-Operation (NOP), Timestamps, SACK permitted, End of Option List (EOL)
	TCP Option - Maximum segment size: 16344 bytes
	Kind: Maximum Segment Size (2)
	Length: 4
	MSS Value: 16344
	TCP Option - No-Operation (NOP)
	TCP Option - Window scale: 6 (multiply by 64)
	Shift count: 6
	Multiplier: 64
	TCP Option - Timestamps: TSval 1759790446, TSecr 0
	Timestamp value: 1759790446
	Timestamp echo reply: 0
	TCP Option - SACK permitted
	TCP Option - End of Option List (EOL)
	Timestamps
	Time since first frame in this TCP stream: 0.000000000 seconds
	Time since previous frame in this TCP stream: 0.000000000 seconds
	Kind: No-Operation (1)
	Kind: Window Scale (3)
	Kind: No-Operation (1)
	Kind: No-Operation (1)
	Kind: Time Stamp Option (8)
	Kind: SACK Permitted (4)
	Kind: End of Option List (0)
	Length: 3
	Length: 10
	Length: 2
	TCP Option - No-Operation (NOP)
	TCP Option - No-Operation (NOP)</msg>
<status status="PASS" starttime="20200715 20:28:51.983" endtime="20200715 20:28:57.383"></status>
</kw>
<msg timestamp="20200715 20:28:57.384" level="INFO">${WIRESHARK_LIVE_CAPTURE_OUTPUT} = Packet (Length: 68)
Layer NULL:
	Family: IP (2)
Layer IP:
	0100 .... = Version: 4
	.... 0101 = Header Length: 20 bytes (5)
	Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)
	0000 00.. = D...</msg>
<status status="PASS" starttime="20200715 20:28:51.982" endtime="20200715 20:28:57.385"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${WIRESHARK_LIVE_CAPTURE_OUTPUT}</arg>
</arguments>
<assign>
<var>${WIRESHARK_LIVE_CAPTURE_RESULT}</var>
</assign>
<msg timestamp="20200715 20:28:57.387" level="INFO">${WIRESHARK_LIVE_CAPTURE_RESULT} = Packet (Length: 68)
Layer NULL:
	Family: IP (2)
Layer IP:
	0100 .... = Version: 4
	.... 0101 = Header Length: 20 bytes (5)
	Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)
	0000 00.. = D...</msg>
<status status="PASS" starttime="20200715 20:28:57.385" endtime="20200715 20:28:57.387"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${WIRESHARK_LIVE_CAPTURE_RESULT}</arg>
</arguments>
<msg timestamp="20200715 20:28:57.388" level="INFO">Packet (Length: 68)
Layer NULL:
	Family: IP (2)
Layer IP:
	0100 .... = Version: 4
	.... 0101 = Header Length: 20 bytes (5)
	Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)
	0000 00.. = Differentiated Services Codepoint: Default (0)
	.... ..00 = Explicit Congestion Notification: Not ECN-Capable Transport (0)
	Total Length: 64
	Identification: 0x0000 (0)
	Flags: 0x4000, Don't fragment
	0... .... .... .... = Reserved bit: Not set
	.1.. .... .... .... = Don't fragment: Set
	..0. .... .... .... = More fragments: Not set
	Fragment offset: 0
	Time to live: 64
	Protocol: TCP (6)
	Header checksum: 0x0000 [validation disabled]
	Header checksum status: Unverified
	Source: 127.0.0.1
	Destination: 127.0.0.1
Layer TCP:
	Source Port: 49398
	Destination Port: 5037
	Stream index: 0
	TCP Segment Len: 0
	Sequence number: 0    (relative sequence number)
	Sequence number (raw): 2457077746
	Next sequence number: 1    (relative sequence number)
	Acknowledgment number: 0
	Acknowledgment number (raw): 0
	1011 .... = Header Length: 44 bytes (11)
	Flags: 0x002 (SYN)
	000. .... .... = Reserved: Not set
	...0 .... .... = Nonce: Not set
	.... 0... .... = Congestion Window Reduced (CWR): Not set
	.... .0.. .... = ECN-Echo: Not set
	.... ..0. .... = Urgent: Not set
	.... ...0 .... = Acknowledgment: Not set
	.... .... 0... = Push: Not set
	.... .... .0.. = Reset: Not set
	.... .... ..1. = Syn: Set
	Expert Info (Chat/Sequence): Connection establish request (SYN): server port 5037
	Connection establish request (SYN): server port 5037
	Severity level: Chat
	Group: Sequence
	.... .... ...0 = Fin: Not set
	TCP Flags: \xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7S\xc2\xb7
	Window size value: 65535
	Calculated window size: 65535
	Checksum: 0xfe34 [unverified]
	Checksum Status: Unverified
	Urgent pointer: 0
	Options: (24 bytes), Maximum segment size, No-Operation (NOP), Window scale, No-Operation (NOP), No-Operation (NOP), Timestamps, SACK permitted, End of Option List (EOL)
	TCP Option - Maximum segment size: 16344 bytes
	Kind: Maximum Segment Size (2)
	Length: 4
	MSS Value: 16344
	TCP Option - No-Operation (NOP)
	TCP Option - Window scale: 6 (multiply by 64)
	Shift count: 6
	Multiplier: 64
	TCP Option - Timestamps: TSval 1759790446, TSecr 0
	Timestamp value: 1759790446
	Timestamp echo reply: 0
	TCP Option - SACK permitted
	TCP Option - End of Option List (EOL)
	Timestamps
	Time since first frame in this TCP stream: 0.000000000 seconds
	Time since previous frame in this TCP stream: 0.000000000 seconds
	Kind: No-Operation (1)
	Kind: Window Scale (3)
	Kind: No-Operation (1)
	Kind: No-Operation (1)
	Kind: Time Stamp Option (8)
	Kind: SACK Permitted (4)
	Kind: End of Option List (0)
	Length: 3
	Length: 10
	Length: 2
	TCP Option - No-Operation (NOP)
	TCP Option - No-Operation (NOP)
</msg>
<status status="PASS" starttime="20200715 20:28:57.387" endtime="20200715 20:28:57.388"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${WIRESHARK_LIVE_CAPTURE_RESULT}</arg>
<arg>Layer</arg>
</arguments>
<status status="PASS" starttime="20200715 20:28:57.388" endtime="20200715 20:28:57.389"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:51.982" endtime="20200715 20:28:57.389"></status>
</kw>
<kw name="Close Browser And Terminate Wireshark Processes" type="teardown">
<kw name="Close All Browsers" library="SeleniumLibrary">
<doc>Closes all open browsers and resets the browser cache.</doc>
<status status="PASS" starttime="20200715 20:28:57.390" endtime="20200715 20:29:05.997"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Terminate Wireshark Processes Multiple Times</arg>
</arguments>
<kw name="Terminate Wireshark Processes Multiple Times">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Repeat Keyword</arg>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<msg timestamp="20200715 20:29:05.998" level="INFO">Repeating keyword, round 1/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:29:05.998" endtime="20200715 20:29:06.149"></status>
</kw>
<msg timestamp="20200715 20:29:06.150" level="INFO">Repeating keyword, round 2/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:29:06.150" endtime="20200715 20:29:06.283"></status>
</kw>
<msg timestamp="20200715 20:29:06.284" level="INFO">Repeating keyword, round 3/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:29:06.284" endtime="20200715 20:29:06.431"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:05.998" endtime="20200715 20:29:06.432"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:05.998" endtime="20200715 20:29:06.432"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall tshark</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall tshark</arg>
</arguments>
<msg timestamp="20200715 20:29:06.435" level="INFO">Running command 'killall tshark 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:29:06.432" endtime="20200715 20:29:06.458"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:06.432" endtime="20200715 20:29:06.458"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20200715 20:29:11.460" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20200715 20:29:06.459" endtime="20200715 20:29:11.460"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:05.997" endtime="20200715 20:29:11.461"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:05.997" endtime="20200715 20:29:11.461"></status>
</kw>
<status status="PASS" starttime="20200715 20:28:57.389" endtime="20200715 20:29:11.462"></status>
</kw>
<tags>
<tag>Desktop_Firefox</tag>
<tag>Wireshark</tag>
<tag>Wireshark_MacOS</tag>
</tags>
<status status="PASS" starttime="20200715 20:28:36.857" endtime="20200715 20:29:11.462" critical="yes"></status>
</test>
<test id="s1-s1-t2" name="Go to a YouTube page in a MacOS desktop browser while Wireshark is capturing packets on WiFi, then save it to a packet capture file.">
<kw name="Navigate To Website Using Firefox Then Run Wireshark" type="setup">
<kw name="Terminate Wireshark Processes Multiple Times">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Repeat Keyword</arg>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<msg timestamp="20200715 20:29:11.470" level="INFO">Repeating keyword, round 1/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:29:11.471" endtime="20200715 20:29:11.603"></status>
</kw>
<msg timestamp="20200715 20:29:11.603" level="INFO">Repeating keyword, round 2/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:29:11.603" endtime="20200715 20:29:11.729"></status>
</kw>
<msg timestamp="20200715 20:29:11.729" level="INFO">Repeating keyword, round 3/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:29:11.729" endtime="20200715 20:29:11.862"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:11.470" endtime="20200715 20:29:11.863"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:11.469" endtime="20200715 20:29:11.863"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall tshark</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall tshark</arg>
</arguments>
<msg timestamp="20200715 20:29:11.867" level="INFO">Running command 'killall tshark 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:29:11.863" endtime="20200715 20:29:11.889"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:11.863" endtime="20200715 20:29:11.890"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20200715 20:29:16.891" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20200715 20:29:11.890" endtime="20200715 20:29:16.891"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:11.468" endtime="20200715 20:29:16.892"></status>
</kw>
<kw name="Open The Firefox Browser In MacOS After Wireshark Clean Up">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Set Up Firefox In MacOS Before Starting Wireshark</arg>
<arg>${WIRESHARK_SELENIUM_EXAMPLE_URL}</arg>
<arg>${WIRESHARK_SELENIUM_BROWSER}</arg>
</arguments>
<kw name="Set Up Firefox In MacOS Before Starting Wireshark" library="Selenium-Desktop-Resources">
<arguments>
<arg>${WIRESHARK_SELENIUM_EXAMPLE_URL}</arg>
<arg>${WIRESHARK_SELENIUM_BROWSER}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ps aux | grep "[t]shark"</arg>
<arg>alias=wireshark_mac_os_status</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200715 20:29:16.919" level="INFO">Starting process:
ps aux | grep "[t]shark"</msg>
<msg timestamp="20200715 20:29:16.923" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200715 20:29:17.126" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200715 20:29:16.895" endtime="20200715 20:29:17.127"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>wireshark_mac_os_status</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${WIRESHARK_MAC_OS_STATUS}</var>
</assign>
<msg timestamp="20200715 20:29:17.129" level="INFO">${WIRESHARK_MAC_OS_STATUS} = </msg>
<status status="PASS" starttime="20200715 20:29:17.128" endtime="20200715 20:29:17.129"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${WIRESHARK_MAC_OS_STATUS}</arg>
</arguments>
<msg timestamp="20200715 20:29:17.130" level="INFO"></msg>
<status status="PASS" starttime="20200715 20:29:17.129" endtime="20200715 20:29:17.130"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${WIRESHARK_MAC_OS_STATUS}</arg>
<arg>tshark</arg>
</arguments>
<status status="PASS" starttime="20200715 20:29:17.130" endtime="20200715 20:29:17.131"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Open Browser</arg>
<arg>${WIRESHARK_SELENIUM_EXAMPLE_URL}</arg>
<arg>${WIRESHARK_SELENIUM_BROWSER}</arg>
</arguments>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WIRESHARK_SELENIUM_EXAMPLE_URL}</arg>
<arg>${WIRESHARK_SELENIUM_BROWSER}</arg>
</arguments>
<msg timestamp="20200715 20:29:17.132" level="INFO">Opening browser 'Firefox' to base url 'https://www.youtube.com/watch?v=wBhY5Z2RoqQ&amp;feature=youtu.be&amp;autoplay=1'.</msg>
<msg timestamp="20200715 20:29:17.135" level="INFO">Firefox driver log is always forced to to: /Users/jgorospe/Documents/GitHub/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019-Web-Proxies-Network-Packet-Analyzers/Workshop-Examples/Workshop-Part-Three/geckodriver-114.log</msg>
<status status="PASS" starttime="20200715 20:29:17.132" endtime="20200715 20:29:22.773"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:17.131" endtime="20200715 20:29:22.773"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4s</arg>
</arguments>
<msg timestamp="20200715 20:29:26.775" level="INFO">Slept 4 seconds</msg>
<status status="PASS" starttime="20200715 20:29:22.773" endtime="20200715 20:29:26.775"></status>
</kw>
<timeout value="4 minutes"></timeout>
<status status="PASS" starttime="20200715 20:29:16.893" endtime="20200715 20:29:26.776"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:16.893" endtime="20200715 20:29:26.776"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:16.892" endtime="20200715 20:29:26.776"></status>
</kw>
<kw name="Press Keys" library="SeleniumLibrary">
<doc>Simulates the user pressing key(s) to an element or on the active browser.</doc>
<arguments>
<arg>None</arg>
<arg>k</arg>
</arguments>
<msg timestamp="20200715 20:29:26.777" level="INFO">Sending key(s) ('k',) to page.</msg>
<msg timestamp="20200715 20:29:26.778" level="INFO">Sending key k</msg>
<status status="PASS" starttime="20200715 20:29:26.776" endtime="20200715 20:29:26.815"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:11.467" endtime="20200715 20:29:26.815"></status>
</kw>
<kw name="Run Wireshark For WiFi Interface En0 And Create Packet Capture File">
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Wireshark Live Interface Capture To File</arg>
<arg>en0</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${WIRESHARK_LIVE_FILE_CAPTURE_OUTPUT}</var>
</assign>
<kw name="Wireshark Live Interface Capture To File" library="WiresharkExample">
<arguments>
<arg>en0</arg>
<arg>5</arg>
</arguments>
<status status="PASS" starttime="20200715 20:29:26.817" endtime="20200715 20:29:31.831"></status>
</kw>
<msg timestamp="20200715 20:29:31.831" level="INFO">${WIRESHARK_LIVE_FILE_CAPTURE_OUTPUT} = None</msg>
<status status="PASS" starttime="20200715 20:29:26.816" endtime="20200715 20:29:31.832"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${WIRESHARK_LIVE_FILE_CAPTURE_OUTPUT}</arg>
</arguments>
<msg timestamp="20200715 20:29:31.833" level="INFO">None</msg>
<status status="PASS" starttime="20200715 20:29:31.832" endtime="20200715 20:29:31.833"></status>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<doc>Fails if the specified directory is empty.</doc>
<arguments>
<arg>${PATH}//Workshop-Examples//Tests//Workshop-Part-Two//Resources//wireshark-packets-captured.cap</arg>
</arguments>
<msg timestamp="20200715 20:29:31.833" level="INFO" html="yes">File '&lt;a href="file:///Users/jgorospe/Documents/GitHub/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019-Web-Proxies-Network-Packet-Analyzers/Workshop-Examples/Tests/Workshop-Part-Two/Resources/wireshark-packets-captured.cap"&gt;/Users/jgorospe/Documents/GitHub/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019-Web-Proxies-Network-Packet-Analyzers/Workshop-Examples/Tests/Workshop-Part-Two/Resources/wireshark-packets-captured.cap&lt;/a&gt;' contains 229376 bytes.</msg>
<status status="PASS" starttime="20200715 20:29:31.833" endtime="20200715 20:29:31.833"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:26.816" endtime="20200715 20:29:31.833"></status>
</kw>
<kw name="Close Browser And Terminate Wireshark Processes" type="teardown">
<kw name="Close All Browsers" library="SeleniumLibrary">
<doc>Closes all open browsers and resets the browser cache.</doc>
<status status="PASS" starttime="20200715 20:29:31.834" endtime="20200715 20:29:35.343"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Terminate Wireshark Processes Multiple Times</arg>
</arguments>
<kw name="Terminate Wireshark Processes Multiple Times">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Repeat Keyword</arg>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<msg timestamp="20200715 20:29:35.345" level="INFO">Repeating keyword, round 1/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:29:35.345" endtime="20200715 20:29:35.484"></status>
</kw>
<msg timestamp="20200715 20:29:35.484" level="INFO">Repeating keyword, round 2/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:29:35.484" endtime="20200715 20:29:35.626"></status>
</kw>
<msg timestamp="20200715 20:29:35.626" level="INFO">Repeating keyword, round 3/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:29:35.626" endtime="20200715 20:29:35.760"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:35.344" endtime="20200715 20:29:35.760"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:35.344" endtime="20200715 20:29:35.760"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall tshark</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall tshark</arg>
</arguments>
<msg timestamp="20200715 20:29:35.764" level="INFO">Running command 'killall tshark 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:29:35.761" endtime="20200715 20:29:35.801"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:35.760" endtime="20200715 20:29:35.801"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20200715 20:29:40.802" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20200715 20:29:35.801" endtime="20200715 20:29:40.803"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:35.343" endtime="20200715 20:29:40.804"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:35.343" endtime="20200715 20:29:40.804"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:31.834" endtime="20200715 20:29:40.805"></status>
</kw>
<tags>
<tag>Desktop_Firefox</tag>
<tag>Wireshark</tag>
<tag>Wireshark_MacOS</tag>
</tags>
<status status="PASS" starttime="20200715 20:29:11.465" endtime="20200715 20:29:40.805" critical="yes"></status>
</test>
<test id="s1-s1-t3" name="Go to a YouTube page in a MacOS desktop browser while Wireshark is capturing packets, then run a Lua script to analyze the results.">
<kw name="Navigate To Website Using Firefox Then Run Wireshark" type="setup">
<kw name="Terminate Wireshark Processes Multiple Times">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Repeat Keyword</arg>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<msg timestamp="20200715 20:29:40.812" level="INFO">Repeating keyword, round 1/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:29:40.812" endtime="20200715 20:29:40.953"></status>
</kw>
<msg timestamp="20200715 20:29:40.953" level="INFO">Repeating keyword, round 2/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:29:40.953" endtime="20200715 20:29:41.075"></status>
</kw>
<msg timestamp="20200715 20:29:41.075" level="INFO">Repeating keyword, round 3/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:29:41.075" endtime="20200715 20:29:41.177"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:40.811" endtime="20200715 20:29:41.177"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:40.811" endtime="20200715 20:29:41.177"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall tshark</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall tshark</arg>
</arguments>
<msg timestamp="20200715 20:29:41.181" level="INFO">Running command 'killall tshark 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:29:41.178" endtime="20200715 20:29:41.199"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:41.177" endtime="20200715 20:29:41.199"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20200715 20:29:46.200" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20200715 20:29:41.199" endtime="20200715 20:29:46.201"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:40.810" endtime="20200715 20:29:46.201"></status>
</kw>
<kw name="Open The Firefox Browser In MacOS After Wireshark Clean Up">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Set Up Firefox In MacOS Before Starting Wireshark</arg>
<arg>${WIRESHARK_SELENIUM_EXAMPLE_URL}</arg>
<arg>${WIRESHARK_SELENIUM_BROWSER}</arg>
</arguments>
<kw name="Set Up Firefox In MacOS Before Starting Wireshark" library="Selenium-Desktop-Resources">
<arguments>
<arg>${WIRESHARK_SELENIUM_EXAMPLE_URL}</arg>
<arg>${WIRESHARK_SELENIUM_BROWSER}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ps aux | grep "[t]shark"</arg>
<arg>alias=wireshark_mac_os_status</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200715 20:29:46.207" level="INFO">Starting process:
ps aux | grep "[t]shark"</msg>
<msg timestamp="20200715 20:29:46.215" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200715 20:29:46.417" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200715 20:29:46.206" endtime="20200715 20:29:46.418"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>wireshark_mac_os_status</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${WIRESHARK_MAC_OS_STATUS}</var>
</assign>
<msg timestamp="20200715 20:29:46.422" level="INFO">${WIRESHARK_MAC_OS_STATUS} = </msg>
<status status="PASS" starttime="20200715 20:29:46.419" endtime="20200715 20:29:46.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${WIRESHARK_MAC_OS_STATUS}</arg>
</arguments>
<msg timestamp="20200715 20:29:46.423" level="INFO"></msg>
<status status="PASS" starttime="20200715 20:29:46.422" endtime="20200715 20:29:46.423"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${WIRESHARK_MAC_OS_STATUS}</arg>
<arg>tshark</arg>
</arguments>
<status status="PASS" starttime="20200715 20:29:46.424" endtime="20200715 20:29:46.425"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Open Browser</arg>
<arg>${WIRESHARK_SELENIUM_EXAMPLE_URL}</arg>
<arg>${WIRESHARK_SELENIUM_BROWSER}</arg>
</arguments>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WIRESHARK_SELENIUM_EXAMPLE_URL}</arg>
<arg>${WIRESHARK_SELENIUM_BROWSER}</arg>
</arguments>
<msg timestamp="20200715 20:29:46.427" level="INFO">Opening browser 'Firefox' to base url 'https://www.youtube.com/watch?v=wBhY5Z2RoqQ&amp;feature=youtu.be&amp;autoplay=1'.</msg>
<msg timestamp="20200715 20:29:46.479" level="INFO">Firefox driver log is always forced to to: /Users/jgorospe/Documents/GitHub/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019-Web-Proxies-Network-Packet-Analyzers/Workshop-Examples/Workshop-Part-Three/geckodriver-115.log</msg>
<status status="PASS" starttime="20200715 20:29:46.426" endtime="20200715 20:29:51.869"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:46.425" endtime="20200715 20:29:51.869"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4s</arg>
</arguments>
<msg timestamp="20200715 20:29:55.871" level="INFO">Slept 4 seconds</msg>
<status status="PASS" starttime="20200715 20:29:51.870" endtime="20200715 20:29:55.872"></status>
</kw>
<timeout value="4 minutes"></timeout>
<status status="PASS" starttime="20200715 20:29:46.204" endtime="20200715 20:29:55.872"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:46.203" endtime="20200715 20:29:55.873"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:46.201" endtime="20200715 20:29:55.873"></status>
</kw>
<kw name="Press Keys" library="SeleniumLibrary">
<doc>Simulates the user pressing key(s) to an element or on the active browser.</doc>
<arguments>
<arg>None</arg>
<arg>k</arg>
</arguments>
<msg timestamp="20200715 20:29:55.875" level="INFO">Sending key(s) ('k',) to page.</msg>
<msg timestamp="20200715 20:29:55.875" level="INFO">Sending key k</msg>
<status status="PASS" starttime="20200715 20:29:55.874" endtime="20200715 20:29:55.915"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:40.810" endtime="20200715 20:29:55.915"></status>
</kw>
<kw name="Run Wireshark Lua Script And Check The Output">
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Wireshark Lua Script</arg>
<arg>wireshark_lua_script.lua</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${WIRESHARK_LUA_SCRIPT_OUTPUT}</var>
</assign>
<kw name="Wireshark Lua Script" library="WiresharkExample">
<arguments>
<arg>wireshark_lua_script.lua</arg>
<arg>2</arg>
</arguments>
<msg timestamp="20200715 20:29:58.938" level="INFO">/Users/jgorospe/Documents/GitHub/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019-Web-Proxies-Network-Packet-Analyzers/Workshop-Examples/Tests/Workshop-Part-Two/Resources/wireshark_lua_script.lua</msg>
<status status="PASS" starttime="20200715 20:29:55.916" endtime="20200715 20:29:58.938"></status>
</kw>
<msg timestamp="20200715 20:29:58.939" level="INFO">${WIRESHARK_LUA_SCRIPT_OUTPUT} =     1   0.000000 192.168.1.151 \xe2\x86\x92 172.217.10.46 TLSv1.2 577 Application Data
    2   0.018440 172.217.10.46 \xe2\x86\x92 192.168.1.151 TCP 66 443 \xe2\x86\x92 49551 [ACK] Seq=1 Ack=512 Win=3...</msg>
<status status="PASS" starttime="20200715 20:29:55.916" endtime="20200715 20:29:58.939"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${WIRESHARK_LUA_SCRIPT_OUTPUT}</arg>
</arguments>
<assign>
<var>${WIRESHARK_LUA_SCRIPT_RESULT}</var>
</assign>
<msg timestamp="20200715 20:29:58.940" level="INFO">${WIRESHARK_LUA_SCRIPT_RESULT} =     1   0.000000 192.168.1.151 \xe2\x86\x92 172.217.10.46 TLSv1.2 577 Application Data
    2   0.018440 172.217.10.46 \xe2\x86\x92 192.168.1.151 TCP 66 443 \xe2\x86\x92 49551 [ACK] Seq=1 Ack=512 Win=3...</msg>
<status status="PASS" starttime="20200715 20:29:58.939" endtime="20200715 20:29:58.940"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${WIRESHARK_LUA_SCRIPT_RESULT}</arg>
</arguments>
<msg timestamp="20200715 20:29:58.940" level="INFO">    1   0.000000 192.168.1.151 \xe2\x86\x92 172.217.10.46 TLSv1.2 577 Application Data
    2   0.018440 172.217.10.46 \xe2\x86\x92 192.168.1.151 TCP 66 443 \xe2\x86\x92 49551 [ACK] Seq=1 Ack=512 Win=341 Len=0 TSval=2138416444 TSecr=1759851073
Number of packets captured for a given IP address: 	2
</msg>
<status status="PASS" starttime="20200715 20:29:58.940" endtime="20200715 20:29:58.940"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${WIRESHARK_LUA_SCRIPT_RESULT}</arg>
<arg>Number of packets captured for a given IP address</arg>
</arguments>
<status status="PASS" starttime="20200715 20:29:58.940" endtime="20200715 20:29:58.941"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:55.915" endtime="20200715 20:29:58.941"></status>
</kw>
<kw name="Close Browser And Terminate Wireshark Processes" type="teardown">
<kw name="Close All Browsers" library="SeleniumLibrary">
<doc>Closes all open browsers and resets the browser cache.</doc>
<status status="PASS" starttime="20200715 20:29:58.942" endtime="20200715 20:30:02.440"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Terminate Wireshark Processes Multiple Times</arg>
</arguments>
<kw name="Terminate Wireshark Processes Multiple Times">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Repeat Keyword</arg>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<msg timestamp="20200715 20:30:02.442" level="INFO">Repeating keyword, round 1/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:30:02.442" endtime="20200715 20:30:02.549"></status>
</kw>
<msg timestamp="20200715 20:30:02.549" level="INFO">Repeating keyword, round 2/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:30:02.549" endtime="20200715 20:30:02.648"></status>
</kw>
<msg timestamp="20200715 20:30:02.648" level="INFO">Repeating keyword, round 3/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:30:02.648" endtime="20200715 20:30:02.748"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:02.441" endtime="20200715 20:30:02.748"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:02.441" endtime="20200715 20:30:02.748"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall tshark</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall tshark</arg>
</arguments>
<msg timestamp="20200715 20:30:02.752" level="INFO">Running command 'killall tshark 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:30:02.749" endtime="20200715 20:30:02.772"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:02.749" endtime="20200715 20:30:02.773"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20200715 20:30:07.775" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20200715 20:30:02.773" endtime="20200715 20:30:07.775"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:02.441" endtime="20200715 20:30:07.776"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:02.440" endtime="20200715 20:30:07.776"></status>
</kw>
<status status="PASS" starttime="20200715 20:29:58.941" endtime="20200715 20:30:07.776"></status>
</kw>
<tags>
<tag>Desktop_Firefox</tag>
<tag>Wireshark</tag>
<tag>Wireshark_MacOS</tag>
</tags>
<status status="PASS" starttime="20200715 20:29:40.807" endtime="20200715 20:30:07.776" critical="yes"></status>
</test>
<test id="s1-s1-t4" name="Decrypt a packet capture file with a wireshark-sslkeys.log file, then check the output.">
<kw name="Run Wireshark To Decrypt Captured SSL Traffic And Check The Output">
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Wireshark Decrypt Captured SSL Traffic</arg>
<arg>wireshark-packets-captured.cap</arg>
<arg>20</arg>
</arguments>
<assign>
<var>${WIRESHARK_DECRYPT_SSL_OUTPUT}</var>
</assign>
<kw name="Wireshark Decrypt Captured Ssl Traffic" library="WiresharkExample">
<arguments>
<arg>wireshark-packets-captured.cap</arg>
<arg>20</arg>
</arguments>
<msg timestamp="20200715 20:30:08.079" level="INFO">/Users/jgorospe/Documents/GitHub/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019-Web-Proxies-Network-Packet-Analyzers/Workshop-Examples/Tests/Workshop-Part-Two/Resources/wireshark-sslkeys.log</msg>
<status status="PASS" starttime="20200715 20:30:07.781" endtime="20200715 20:30:08.080"></status>
</kw>
<msg timestamp="20200715 20:30:08.080" level="INFO">${WIRESHARK_DECRYPT_SSL_OUTPUT} =     1   0.000000 192.168.1.151 \xe2\x86\x92 65.206.58.17 TLSv1.2 1298 Application Data
    2   0.022191 65.206.58.17 \xe2\x86\x92 192.168.1.151 TCP 66 443 \xe2\x86\x92 49483 [ACK] Seq=1 Ack=1233 Win=3...</msg>
<status status="PASS" starttime="20200715 20:30:07.780" endtime="20200715 20:30:08.080"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${WIRESHARK_DECRYPT_SSL_OUTPUT}</arg>
</arguments>
<assign>
<var>${WIRESHARK_DECRYPT_SSL_RESULT}</var>
</assign>
<msg timestamp="20200715 20:30:08.082" level="INFO">${WIRESHARK_DECRYPT_SSL_RESULT} =     1   0.000000 192.168.1.151 \xe2\x86\x92 65.206.58.17 TLSv1.2 1298 Application Data
    2   0.022191 65.206.58.17 \xe2\x86\x92 192.168.1.151 TCP 66 443 \xe2\x86\x92 49483 [ACK] Seq=1 Ack=1233 Win=3...</msg>
<status status="PASS" starttime="20200715 20:30:08.081" endtime="20200715 20:30:08.082"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${WIRESHARK_DECRYPT_SSL_RESULT}</arg>
</arguments>
<msg timestamp="20200715 20:30:08.082" level="INFO">    1   0.000000 192.168.1.151 \xe2\x86\x92 65.206.58.17 TLSv1.2 1298 Application Data
    2   0.022191 65.206.58.17 \xe2\x86\x92 192.168.1.151 TCP 66 443 \xe2\x86\x92 49483 [ACK] Seq=1 Ack=1233 Win=362 Len=0 TSval=465881501 TSecr=1759822945
    3   0.023869 65.206.58.17 \xe2\x86\x92 192.168.1.151 TLSv1.2 1514 Application Data
    4   0.023873 65.206.58.17 \xe2\x86\x92 192.168.1.151 TCP 1514 443 \xe2\x86\x92 49483 [ACK] Seq=1449 Ack=1233 Win=362 Len=1448 TSval=465881502 TSecr=1759822945 [TCP segment of a reassembled PDU]
    5   0.023875 65.206.58.17 \xe2\x86\x92 192.168.1.151 TCP 1514 443 \xe2\x86\x92 49483 [ACK] Seq=2897 Ack=1233 Win=362 Len=1448 TSval=465881502 TSecr=1759822945 [TCP segment of a reassembled PDU]
    6   0.023876 65.206.58.17 \xe2\x86\x92 192.168.1.151 TCP 1514 443 \xe2\x86\x92 49483 [ACK] Seq=4345 Ack=1233 Win=362 Len=1448 TSval=465881502 TSecr=1759822945 [TCP segment of a reassembled PDU]
    7   0.023877 65.206.58.17 \xe2\x86\x92 192.168.1.151 TCP 1514 443 \xe2\x86\x92 49483 [ACK] Seq=5793 Ack=1233 Win=362 Len=1448 TSval=465881502 TSecr=1759822945 [TCP segment of a reassembled PDU]
    8   0.023964 192.168.1.151 \xe2\x86\x92 65.206.58.17 TCP 66 49483 \xe2\x86\x92 443 [ACK] Seq=1233 Ack=2897 Win=4559 Len=0 TSval=1759822968 TSecr=465881502
    9   0.023964 192.168.1.151 \xe2\x86\x92 65.206.58.17 TCP 66 49483 \xe2\x86\x92 443 [ACK] Seq=1233 Ack=5793 Win=4514 Len=0 TSval=1759822968 TSecr=465881502
   10   0.024027 65.206.58.17 \xe2\x86\x92 192.168.1.151 TCP 1514 443 \xe2\x86\x92 49483 [ACK] Seq=7241 Ack=1233 Win=362 Len=1448 TSval=465881502 TSecr=1759822945 [TCP segment of a reassembled PDU]
   11   0.024031 65.206.58.17 \xe2\x86\x92 192.168.1.151 TCP 1514 443 \xe2\x86\x92 49483 [ACK] Seq=8689 Ack=1233 Win=362 Len=1448 TSval=465881502 TSecr=1759822945 [TCP segment of a reassembled PDU]
   12   0.024073 192.168.1.151 \xe2\x86\x92 65.206.58.17 TCP 66 49483 \xe2\x86\x92 443 [ACK] Seq=1233 Ack=8689 Win=4468 Len=0 TSval=1759822968 TSecr=465881502
   13   0.024759 65.206.58.17 \xe2\x86\x92 192.168.1.151 TCP 1514 443 \xe2\x86\x92 49483 [ACK] Seq=10137 Ack=1233 Win=362 Len=1448 TSval=465881502 TSecr=1759822945 [TCP segment of a reassembled PDU]
   14   0.024763 65.206.58.17 \xe2\x86\x92 192.168.1.151 TCP 1514 443 \xe2\x86\x92 49483 [ACK] Seq=11585 Ack=1233 Win=362 Len=1448 TSval=465881502 TSecr=1759822945 [TCP segment of a reassembled PDU]
   15   0.024807 192.168.1.151 \xe2\x86\x92 65.206.58.17 TCP 66 49483 \xe2\x86\x92 443 [ACK] Seq=1233 Ack=11585 Win=4423 Len=0 TSval=1759822968 TSecr=465881502
   16   0.024976 192.168.1.151 \xe2\x86\x92 65.206.58.17 TCP 66 49483 \xe2\x86\x92 443 [ACK] Seq=1233 Ack=13033 Win=4604 Len=0 TSval=1759822969 TSecr=465881502
   17   0.025306 65.206.58.17 \xe2\x86\x92 192.168.1.151 TCP 1514 443 \xe2\x86\x92 49483 [ACK] Seq=13033 Ack=1233 Win=362 Len=1448 TSval=465881502 TSecr=1759822945 [TCP segment of a reassembled PDU]
   18   0.025310 65.206.58.17 \xe2\x86\x92 192.168.1.151 TCP 1514 443 \xe2\x86\x92 49483 [ACK] Seq=14481 Ack=1233 Win=362 Len=1448 TSval=465881502 TSecr=1759822945 [TCP segment of a reassembled PDU]
   19   0.025311 65.206.58.17 \xe2\x86\x92 192.168.1.151 TCP 1514 443 \xe2\x86\x92 49483 [ACK] Seq=15929 Ack=1233 Win=362 Len=1448 TSval=465881502 TSecr=1759822945 [TCP segment of a reassembled PDU]
   20   0.025312 65.206.58.17 \xe2\x86\x92 192.168.1.151 TLSv1.2 1514 Application Data [TCP segment of a reassembled PDU]
</msg>
<status status="PASS" starttime="20200715 20:30:08.082" endtime="20200715 20:30:08.082"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${WIRESHARK_DECRYPT_SSL_RESULT}</arg>
<arg>TCP</arg>
</arguments>
<status status="PASS" starttime="20200715 20:30:08.082" endtime="20200715 20:30:08.083"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:07.779" endtime="20200715 20:30:08.083"></status>
</kw>
<kw name="Terminate Wireshark Processes Multiple Times" type="teardown">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Repeat Keyword</arg>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<msg timestamp="20200715 20:30:08.084" level="INFO">Repeating keyword, round 1/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:30:08.084" endtime="20200715 20:30:08.189"></status>
</kw>
<msg timestamp="20200715 20:30:08.189" level="INFO">Repeating keyword, round 2/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:30:08.190" endtime="20200715 20:30:08.284"></status>
</kw>
<msg timestamp="20200715 20:30:08.284" level="INFO">Repeating keyword, round 3/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:30:08.284" endtime="20200715 20:30:08.379"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:08.084" endtime="20200715 20:30:08.380"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:08.084" endtime="20200715 20:30:08.380"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall tshark</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall tshark</arg>
</arguments>
<msg timestamp="20200715 20:30:08.384" level="INFO">Running command 'killall tshark 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:30:08.380" endtime="20200715 20:30:08.404"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:08.380" endtime="20200715 20:30:08.404"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20200715 20:30:13.406" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20200715 20:30:08.404" endtime="20200715 20:30:13.406"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:08.083" endtime="20200715 20:30:13.406"></status>
</kw>
<tags>
<tag>Desktop_Firefox</tag>
<tag>Wireshark</tag>
<tag>Wireshark_MacOS</tag>
</tags>
<status status="PASS" starttime="20200715 20:30:07.778" endtime="20200715 20:30:13.407" critical="yes"></status>
</test>
<doc>Simple example using Wireshark and SeleniumLibrary.</doc>
<status status="PASS" starttime="20200715 20:28:36.350" endtime="20200715 20:30:13.409"></status>
</suite>
<suite id="s1-s2" name="Wireshark-Mobile-Example" source="/Users/jgorospe/Documents/GitHub/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019-Web-Proxies-Network-Packet-Analyzers/Workshop-Examples/Tests/Workshop-Part-Two/Wireshark-Mobile-Example.robot">
<kw name="Stop Any Running Android Emulators And Related Processes On MacOS" library="Appium-Mobile-Resources" type="setup">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>ANDROID_EMULATOR_PID=$(cat ./Workshop-Examples/Shared-Resources/android_emulator_PID.txt) &amp;&amp; kill -s 9 $ANDROID_EMULATOR_PID</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>ANDROID_EMULATOR_PID=$(cat ./Workshop-Examples/Shared-Resources/android_emulator_PID.txt) &amp;&amp; kill -s 9 $ANDROID_EMULATOR_PID</arg>
</arguments>
<msg timestamp="20200715 20:30:13.578" level="INFO">Running command 'ANDROID_EMULATOR_PID=$(cat ./Workshop-Examples/Shared-Resources/android_emulator_PID.txt) &amp;&amp; kill -s 9 $ANDROID_EMULATOR_PID 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:30:13.575" endtime="20200715 20:30:13.593"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:13.575" endtime="20200715 20:30:13.593"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>pgrep emulator | xargs kill</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>pgrep emulator | xargs kill</arg>
</arguments>
<msg timestamp="20200715 20:30:13.596" level="INFO">Running command 'pgrep emulator | xargs kill 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:30:13.594" endtime="20200715 20:30:13.631"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:13.593" endtime="20200715 20:30:13.631"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>pgrep avd | xargs kill</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>pgrep avd | xargs kill</arg>
</arguments>
<msg timestamp="20200715 20:30:13.634" level="INFO">Running command 'pgrep avd | xargs kill 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:30:13.632" endtime="20200715 20:30:13.668"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:13.631" endtime="20200715 20:30:13.668"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>adb kill-server</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>adb kill-server</arg>
</arguments>
<msg timestamp="20200715 20:30:13.672" level="INFO">Running command 'adb kill-server 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:30:13.669" endtime="20200715 20:30:13.728"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:13.669" endtime="20200715 20:30:13.728"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall qemu-system-i386</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall qemu-system-i386</arg>
</arguments>
<msg timestamp="20200715 20:30:13.731" level="INFO">Running command 'killall qemu-system-i386 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:30:13.729" endtime="20200715 20:30:13.747"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:13.728" endtime="20200715 20:30:13.747"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall adb</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall adb</arg>
</arguments>
<msg timestamp="20200715 20:30:13.750" level="INFO">Running command 'killall adb 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:30:13.748" endtime="20200715 20:30:13.764"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:13.747" endtime="20200715 20:30:13.764"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:13.574" endtime="20200715 20:30:13.765"></status>
</kw>
<test id="s1-s2-t1" name="Go to a YouTube page in an iOS mobile browser while Wireshark is capturing packets on WiFi, then save it to a packet capture file.">
<kw name="Navigate To Website Using Safari Then Run Wireshark" type="setup">
<kw name="Terminate Wireshark Processes Multiple Times">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Repeat Keyword</arg>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<msg timestamp="20200715 20:30:13.767" level="INFO">Repeating keyword, round 1/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:30:13.767" endtime="20200715 20:30:13.877"></status>
</kw>
<msg timestamp="20200715 20:30:13.877" level="INFO">Repeating keyword, round 2/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:30:13.878" endtime="20200715 20:30:13.972"></status>
</kw>
<msg timestamp="20200715 20:30:13.972" level="INFO">Repeating keyword, round 3/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:30:13.972" endtime="20200715 20:30:14.066"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:13.767" endtime="20200715 20:30:14.066"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:13.767" endtime="20200715 20:30:14.067"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall tshark</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall tshark</arg>
</arguments>
<msg timestamp="20200715 20:30:14.070" level="INFO">Running command 'killall tshark 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:30:14.067" endtime="20200715 20:30:14.085"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:14.067" endtime="20200715 20:30:14.086"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20200715 20:30:19.087" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20200715 20:30:14.086" endtime="20200715 20:30:19.088"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:13.766" endtime="20200715 20:30:19.088"></status>
</kw>
<kw name="Open The Safari Browser In IOS After Wireshark Clean Up">
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
<arg>%{PARALLEL_APPIUM_REMOTE_URL1}</arg>
</arguments>
<msg timestamp="20200715 20:30:19.092" level="INFO">${PARALLEL_APPIUM_REMOTE_URL} = http://localhost:4723/wd/hub</msg>
<status status="PASS" starttime="20200715 20:30:19.089" endtime="20200715 20:30:19.092"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${DEVICE_NAME_IOS}</arg>
<arg>%{DEVICE_NAME1_IOS}</arg>
</arguments>
<msg timestamp="20200715 20:30:19.094" level="INFO">${DEVICE_NAME_IOS} = iPhone X</msg>
<status status="PASS" starttime="20200715 20:30:19.092" endtime="20200715 20:30:19.094"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_PORT}</arg>
<arg>%{PARALLEL_APPIUM_PORT1}</arg>
</arguments>
<msg timestamp="20200715 20:30:19.095" level="INFO">${PARALLEL_APPIUM_PORT} = 4723</msg>
<status status="PASS" starttime="20200715 20:30:19.094" endtime="20200715 20:30:19.095"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_WDALOCALPORT}</arg>
<arg>%{PARALLEL_APPIUM_WDALOCALPORT1}</arg>
</arguments>
<msg timestamp="20200715 20:30:19.097" level="INFO">${PARALLEL_APPIUM_WDALOCALPORT} = 8100</msg>
<status status="PASS" starttime="20200715 20:30:19.096" endtime="20200715 20:30:19.097"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
</arguments>
<msg timestamp="20200715 20:30:19.097" level="INFO">Length is 28</msg>
<status status="PASS" starttime="20200715 20:30:19.097" endtime="20200715 20:30:19.098"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${DEVICE_NAME_IOS}</arg>
</arguments>
<msg timestamp="20200715 20:30:19.098" level="INFO">Length is 8</msg>
<status status="PASS" starttime="20200715 20:30:19.098" endtime="20200715 20:30:19.098"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_PORT}</arg>
</arguments>
<msg timestamp="20200715 20:30:19.098" level="INFO">Length is 4</msg>
<status status="PASS" starttime="20200715 20:30:19.098" endtime="20200715 20:30:19.099"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_WDALOCALPORT}</arg>
</arguments>
<msg timestamp="20200715 20:30:19.099" level="INFO">Length is 4</msg>
<status status="PASS" starttime="20200715 20:30:19.099" endtime="20200715 20:30:19.099"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Set Up Safari In IOS Before Starting Wireshark</arg>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
<arg>${DEVICE_NAME_IOS}</arg>
<arg>${PARALLEL_APPIUM_PORT}</arg>
<arg>${PARALLEL_APPIUM_WDALOCALPORT}</arg>
<arg>${WIRESHARK_APPIUM_EXAMPLE_URL}</arg>
</arguments>
<kw name="Set Up Safari In IOS Before Starting Wireshark" library="Appium-Mobile-Resources">
<arguments>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
<arg>${DEVICE_NAME_IOS}</arg>
<arg>${PARALLEL_APPIUM_PORT}</arg>
<arg>${PARALLEL_APPIUM_WDALOCALPORT}</arg>
<arg>${WIRESHARK_APPIUM_EXAMPLE_URL}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ps aux | grep "[t]shark"</arg>
<arg>alias=wireshark_mac_os_status</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200715 20:30:19.101" level="INFO">Starting process:
ps aux | grep "[t]shark"</msg>
<msg timestamp="20200715 20:30:19.106" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200715 20:30:19.309" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200715 20:30:19.100" endtime="20200715 20:30:19.310"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>wireshark_mac_os_status</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${WIRESHARK_MAC_OS_STATUS}</var>
</assign>
<msg timestamp="20200715 20:30:19.312" level="INFO">${WIRESHARK_MAC_OS_STATUS} = </msg>
<status status="PASS" starttime="20200715 20:30:19.310" endtime="20200715 20:30:19.312"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${WIRESHARK_MAC_OS_STATUS}</arg>
</arguments>
<msg timestamp="20200715 20:30:19.313" level="INFO"></msg>
<status status="PASS" starttime="20200715 20:30:19.312" endtime="20200715 20:30:19.313"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${WIRESHARK_MAC_OS_STATUS}</arg>
<arg>tshark</arg>
</arguments>
<status status="PASS" starttime="20200715 20:30:19.314" endtime="20200715 20:30:19.314"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Open Application</arg>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
<arg>platformName=${PLATFORM_NAME_IOS}</arg>
<arg>platformVersion=${PLATFORM_VERSION_IOS}</arg>
<arg>devicetype=simulator</arg>
<arg>deviceName=${DEVICE_NAME_IOS}</arg>
<arg>PORT=${PARALLEL_APPIUM_PORT}</arg>
<arg>WDALOCALPORT=${PARALLEL_APPIUM_WDALOCALPORT}</arg>
<arg>automationName=${IOS_AUTOMATION_NAME}</arg>
<arg>startIWDP=true</arg>
<arg>browserName=Safari</arg>
<arg>bundleid=com.apple.mobilesafari</arg>
</arguments>
<kw name="Open Application" library="AppiumLibrary">
<doc>Opens a new application to given Appium server.
Capabilities of appium server, Android and iOS,
Please check https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/server-args.md
| *Option*            | *Man.* | *Description*     |
| remote_url          | Yes    | Appium server url |
| alias               | no     | alias             |</doc>
<arguments>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
<arg>platformName=${PLATFORM_NAME_IOS}</arg>
<arg>platformVersion=${PLATFORM_VERSION_IOS}</arg>
<arg>devicetype=simulator</arg>
<arg>deviceName=${DEVICE_NAME_IOS}</arg>
<arg>PORT=${PARALLEL_APPIUM_PORT}</arg>
<arg>WDALOCALPORT=${PARALLEL_APPIUM_WDALOCALPORT}</arg>
<arg>automationName=${IOS_AUTOMATION_NAME}</arg>
<arg>startIWDP=true</arg>
<arg>browserName=Safari</arg>
<arg>bundleid=com.apple.mobilesafari</arg>
</arguments>
<status status="PASS" starttime="20200715 20:30:19.315" endtime="20200715 20:30:41.154"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:19.315" endtime="20200715 20:30:41.154"></status>
</kw>
<kw name="Go To Url" library="AppiumLibrary">
<doc>Opens URL in default web browser.</doc>
<arguments>
<arg>${WIRESHARK_APPIUM_EXAMPLE_URL}</arg>
</arguments>
<status status="PASS" starttime="20200715 20:30:41.154" endtime="20200715 20:30:42.714"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4s</arg>
</arguments>
<msg timestamp="20200715 20:30:46.716" level="INFO">Slept 4 seconds</msg>
<status status="PASS" starttime="20200715 20:30:42.715" endtime="20200715 20:30:46.716"></status>
</kw>
<timeout value="4 minutes"></timeout>
<status status="PASS" starttime="20200715 20:30:19.099" endtime="20200715 20:30:46.717"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:19.099" endtime="20200715 20:30:46.717"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:19.088" endtime="20200715 20:30:46.717"></status>
</kw>
<kw name="Go To Url" library="AppiumLibrary">
<doc>Opens URL in default web browser.</doc>
<arguments>
<arg>https://www.youtube.com/watch?v=0yEnJt6Sf50&amp;list=PLSK6YK5OGX1AZMAffD8EiTDq0lfzshRNg&amp;autoplay=1</arg>
</arguments>
<status status="PASS" starttime="20200715 20:30:46.717" endtime="20200715 20:30:51.836"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:13.766" endtime="20200715 20:30:51.836"></status>
</kw>
<kw name="Run Wireshark For WiFi Interface En0 And Create Packet Capture File">
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Wireshark Live Interface Capture To File</arg>
<arg>en0</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${WIRESHARK_LIVE_FILE_CAPTURE_OUTPUT}</var>
</assign>
<kw name="Wireshark Live Interface Capture To File" library="WiresharkExample">
<arguments>
<arg>en0</arg>
<arg>5</arg>
</arguments>
<status status="PASS" starttime="20200715 20:30:51.837" endtime="20200715 20:30:56.855"></status>
</kw>
<msg timestamp="20200715 20:30:56.856" level="INFO">${WIRESHARK_LIVE_FILE_CAPTURE_OUTPUT} = None</msg>
<status status="PASS" starttime="20200715 20:30:51.837" endtime="20200715 20:30:56.856"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${WIRESHARK_LIVE_FILE_CAPTURE_OUTPUT}</arg>
</arguments>
<msg timestamp="20200715 20:30:56.857" level="INFO">None</msg>
<status status="PASS" starttime="20200715 20:30:56.856" endtime="20200715 20:30:56.857"></status>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<doc>Fails if the specified directory is empty.</doc>
<arguments>
<arg>${PATH}//Workshop-Examples//Tests//Workshop-Part-Two//Resources//wireshark-packets-captured.cap</arg>
</arguments>
<msg timestamp="20200715 20:30:56.858" level="INFO" html="yes">File '&lt;a href="file:///Users/jgorospe/Documents/GitHub/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019-Web-Proxies-Network-Packet-Analyzers/Workshop-Examples/Tests/Workshop-Part-Two/Resources/wireshark-packets-captured.cap"&gt;/Users/jgorospe/Documents/GitHub/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019-Web-Proxies-Network-Packet-Analyzers/Workshop-Examples/Tests/Workshop-Part-Two/Resources/wireshark-packets-captured.cap&lt;/a&gt;' contains 4096 bytes.</msg>
<status status="PASS" starttime="20200715 20:30:56.857" endtime="20200715 20:30:56.858"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:51.837" endtime="20200715 20:30:56.858"></status>
</kw>
<kw name="Close Applications And Terminate Wireshark Processes" type="teardown">
<kw name="Close All Applications" library="AppiumLibrary">
<doc>Closes all open applications.</doc>
<status status="PASS" starttime="20200715 20:30:56.859" endtime="20200715 20:30:57.912"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Terminate Wireshark Processes Multiple Times</arg>
</arguments>
<kw name="Terminate Wireshark Processes Multiple Times">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Repeat Keyword</arg>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<msg timestamp="20200715 20:30:57.913" level="INFO">Repeating keyword, round 1/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:30:57.913" endtime="20200715 20:30:58.019"></status>
</kw>
<msg timestamp="20200715 20:30:58.019" level="INFO">Repeating keyword, round 2/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:30:58.019" endtime="20200715 20:30:58.116"></status>
</kw>
<msg timestamp="20200715 20:30:58.116" level="INFO">Repeating keyword, round 3/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:30:58.116" endtime="20200715 20:30:58.211"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:57.913" endtime="20200715 20:30:58.211"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:57.913" endtime="20200715 20:30:58.211"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall tshark</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall tshark</arg>
</arguments>
<msg timestamp="20200715 20:30:58.216" level="INFO">Running command 'killall tshark 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:30:58.212" endtime="20200715 20:30:58.235"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:58.212" endtime="20200715 20:30:58.235"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20200715 20:31:03.237" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20200715 20:30:58.236" endtime="20200715 20:31:03.237"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:57.912" endtime="20200715 20:31:03.237"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:57.912" endtime="20200715 20:31:03.238"></status>
</kw>
<status status="PASS" starttime="20200715 20:30:56.858" endtime="20200715 20:31:03.238"></status>
</kw>
<tags>
<tag>Mobile_Safari</tag>
<tag>Wireshark</tag>
<tag>Wireshark_IOS</tag>
</tags>
<status status="PASS" starttime="20200715 20:30:13.765" endtime="20200715 20:31:03.238" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="Go to a YouTube page in an iOS mobile browser while Wireshark is capturing packets on WiFi, then check the Loopback Interface.">
<kw name="Navigate To Website Using Safari Then Run Wireshark" type="setup">
<kw name="Terminate Wireshark Processes Multiple Times">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Repeat Keyword</arg>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<msg timestamp="20200715 20:31:03.243" level="INFO">Repeating keyword, round 1/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:31:03.243" endtime="20200715 20:31:03.348"></status>
</kw>
<msg timestamp="20200715 20:31:03.348" level="INFO">Repeating keyword, round 2/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:31:03.349" endtime="20200715 20:31:03.444"></status>
</kw>
<msg timestamp="20200715 20:31:03.444" level="INFO">Repeating keyword, round 3/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:31:03.444" endtime="20200715 20:31:03.541"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:03.243" endtime="20200715 20:31:03.541"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:03.243" endtime="20200715 20:31:03.541"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall tshark</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall tshark</arg>
</arguments>
<msg timestamp="20200715 20:31:03.545" level="INFO">Running command 'killall tshark 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:31:03.542" endtime="20200715 20:31:03.575"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:03.542" endtime="20200715 20:31:03.575"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20200715 20:31:08.578" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20200715 20:31:03.575" endtime="20200715 20:31:08.578"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:03.242" endtime="20200715 20:31:08.579"></status>
</kw>
<kw name="Open The Safari Browser In IOS After Wireshark Clean Up">
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
<arg>%{PARALLEL_APPIUM_REMOTE_URL1}</arg>
</arguments>
<msg timestamp="20200715 20:31:08.581" level="INFO">${PARALLEL_APPIUM_REMOTE_URL} = http://localhost:4723/wd/hub</msg>
<status status="PASS" starttime="20200715 20:31:08.580" endtime="20200715 20:31:08.581"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${DEVICE_NAME_IOS}</arg>
<arg>%{DEVICE_NAME1_IOS}</arg>
</arguments>
<msg timestamp="20200715 20:31:08.581" level="INFO">${DEVICE_NAME_IOS} = iPhone X</msg>
<status status="PASS" starttime="20200715 20:31:08.581" endtime="20200715 20:31:08.582"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_PORT}</arg>
<arg>%{PARALLEL_APPIUM_PORT1}</arg>
</arguments>
<msg timestamp="20200715 20:31:08.582" level="INFO">${PARALLEL_APPIUM_PORT} = 4723</msg>
<status status="PASS" starttime="20200715 20:31:08.582" endtime="20200715 20:31:08.583"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_WDALOCALPORT}</arg>
<arg>%{PARALLEL_APPIUM_WDALOCALPORT1}</arg>
</arguments>
<msg timestamp="20200715 20:31:08.583" level="INFO">${PARALLEL_APPIUM_WDALOCALPORT} = 8100</msg>
<status status="PASS" starttime="20200715 20:31:08.583" endtime="20200715 20:31:08.583"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
</arguments>
<msg timestamp="20200715 20:31:08.584" level="INFO">Length is 28</msg>
<status status="PASS" starttime="20200715 20:31:08.584" endtime="20200715 20:31:08.584"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${DEVICE_NAME_IOS}</arg>
</arguments>
<msg timestamp="20200715 20:31:08.584" level="INFO">Length is 8</msg>
<status status="PASS" starttime="20200715 20:31:08.584" endtime="20200715 20:31:08.584"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_PORT}</arg>
</arguments>
<msg timestamp="20200715 20:31:08.585" level="INFO">Length is 4</msg>
<status status="PASS" starttime="20200715 20:31:08.585" endtime="20200715 20:31:08.585"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_WDALOCALPORT}</arg>
</arguments>
<msg timestamp="20200715 20:31:08.585" level="INFO">Length is 4</msg>
<status status="PASS" starttime="20200715 20:31:08.585" endtime="20200715 20:31:08.585"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Set Up Safari In IOS Before Starting Wireshark</arg>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
<arg>${DEVICE_NAME_IOS}</arg>
<arg>${PARALLEL_APPIUM_PORT}</arg>
<arg>${PARALLEL_APPIUM_WDALOCALPORT}</arg>
<arg>${WIRESHARK_APPIUM_EXAMPLE_URL}</arg>
</arguments>
<kw name="Set Up Safari In IOS Before Starting Wireshark" library="Appium-Mobile-Resources">
<arguments>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
<arg>${DEVICE_NAME_IOS}</arg>
<arg>${PARALLEL_APPIUM_PORT}</arg>
<arg>${PARALLEL_APPIUM_WDALOCALPORT}</arg>
<arg>${WIRESHARK_APPIUM_EXAMPLE_URL}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ps aux | grep "[t]shark"</arg>
<arg>alias=wireshark_mac_os_status</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200715 20:31:08.588" level="INFO">Starting process:
ps aux | grep "[t]shark"</msg>
<msg timestamp="20200715 20:31:08.593" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200715 20:31:08.795" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200715 20:31:08.587" endtime="20200715 20:31:08.796"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>wireshark_mac_os_status</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${WIRESHARK_MAC_OS_STATUS}</var>
</assign>
<msg timestamp="20200715 20:31:08.799" level="INFO">${WIRESHARK_MAC_OS_STATUS} = </msg>
<status status="PASS" starttime="20200715 20:31:08.797" endtime="20200715 20:31:08.799"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${WIRESHARK_MAC_OS_STATUS}</arg>
</arguments>
<msg timestamp="20200715 20:31:08.800" level="INFO"></msg>
<status status="PASS" starttime="20200715 20:31:08.799" endtime="20200715 20:31:08.800"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${WIRESHARK_MAC_OS_STATUS}</arg>
<arg>tshark</arg>
</arguments>
<status status="PASS" starttime="20200715 20:31:08.800" endtime="20200715 20:31:08.800"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Open Application</arg>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
<arg>platformName=${PLATFORM_NAME_IOS}</arg>
<arg>platformVersion=${PLATFORM_VERSION_IOS}</arg>
<arg>devicetype=simulator</arg>
<arg>deviceName=${DEVICE_NAME_IOS}</arg>
<arg>PORT=${PARALLEL_APPIUM_PORT}</arg>
<arg>WDALOCALPORT=${PARALLEL_APPIUM_WDALOCALPORT}</arg>
<arg>automationName=${IOS_AUTOMATION_NAME}</arg>
<arg>startIWDP=true</arg>
<arg>browserName=Safari</arg>
<arg>bundleid=com.apple.mobilesafari</arg>
</arguments>
<kw name="Open Application" library="AppiumLibrary">
<doc>Opens a new application to given Appium server.
Capabilities of appium server, Android and iOS,
Please check https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/server-args.md
| *Option*            | *Man.* | *Description*     |
| remote_url          | Yes    | Appium server url |
| alias               | no     | alias             |</doc>
<arguments>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
<arg>platformName=${PLATFORM_NAME_IOS}</arg>
<arg>platformVersion=${PLATFORM_VERSION_IOS}</arg>
<arg>devicetype=simulator</arg>
<arg>deviceName=${DEVICE_NAME_IOS}</arg>
<arg>PORT=${PARALLEL_APPIUM_PORT}</arg>
<arg>WDALOCALPORT=${PARALLEL_APPIUM_WDALOCALPORT}</arg>
<arg>automationName=${IOS_AUTOMATION_NAME}</arg>
<arg>startIWDP=true</arg>
<arg>browserName=Safari</arg>
<arg>bundleid=com.apple.mobilesafari</arg>
</arguments>
<status status="PASS" starttime="20200715 20:31:08.801" endtime="20200715 20:31:13.223"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:08.801" endtime="20200715 20:31:13.223"></status>
</kw>
<kw name="Go To Url" library="AppiumLibrary">
<doc>Opens URL in default web browser.</doc>
<arguments>
<arg>${WIRESHARK_APPIUM_EXAMPLE_URL}</arg>
</arguments>
<status status="PASS" starttime="20200715 20:31:13.223" endtime="20200715 20:31:14.749"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4s</arg>
</arguments>
<msg timestamp="20200715 20:31:18.750" level="INFO">Slept 4 seconds</msg>
<status status="PASS" starttime="20200715 20:31:14.749" endtime="20200715 20:31:18.751"></status>
</kw>
<timeout value="4 minutes"></timeout>
<status status="PASS" starttime="20200715 20:31:08.586" endtime="20200715 20:31:18.751"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:08.586" endtime="20200715 20:31:18.751"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:08.579" endtime="20200715 20:31:18.752"></status>
</kw>
<kw name="Go To Url" library="AppiumLibrary">
<doc>Opens URL in default web browser.</doc>
<arguments>
<arg>https://www.youtube.com/watch?v=0yEnJt6Sf50&amp;list=PLSK6YK5OGX1AZMAffD8EiTDq0lfzshRNg&amp;autoplay=1</arg>
</arguments>
<status status="PASS" starttime="20200715 20:31:18.752" endtime="20200715 20:31:22.814"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:03.241" endtime="20200715 20:31:22.815"></status>
</kw>
<kw name="Run Wireshark Live Packet Capture For Loopback Interface Lo0 And Check The Output">
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Wireshark Live Interface Packet Capture</arg>
<arg>lo0</arg>
<arg>5</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${WIRESHARK_LIVE_CAPTURE_OUTPUT}</var>
</assign>
<kw name="Wireshark Live Interface Packet Capture" library="WiresharkExample">
<arguments>
<arg>lo0</arg>
<arg>5</arg>
<arg>5</arg>
</arguments>
<msg timestamp="20200715 20:31:28.189" level="INFO">Total amount:  &lt;LiveCapture (16 packets)&gt;
Recently captured through the live interface:  Packet (Length: 68)
Layer NULL:
	Family: IP (2)
Layer IP:
	0100 .... = Version: 4
	.... 0101 = Header Length: 20 bytes (5)
	Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)
	0000 00.. = Differentiated Services Codepoint: Default (0)
	.... ..00 = Explicit Congestion Notification: Not ECN-Capable Transport (0)
	Total Length: 64
	Identification: 0x0000 (0)
	Flags: 0x4000, Don't fragment
	0... .... .... .... = Reserved bit: Not set
	.1.. .... .... .... = Don't fragment: Set
	..0. .... .... .... = More fragments: Not set
	Fragment offset: 0
	Time to live: 64
	Protocol: TCP (6)
	Header checksum: 0x0000 [validation disabled]
	Header checksum status: Unverified
	Source: 127.0.0.1
	Destination: 127.0.0.1
Layer TCP:
	Source Port: 49676
	Destination Port: 5037
	Stream index: 0
	TCP Segment Len: 0
	Sequence number: 0    (relative sequence number)
	Sequence number (raw): 1852668699
	Next sequence number: 1    (relative sequence number)
	Acknowledgment number: 0
	Acknowledgment number (raw): 0
	1011 .... = Header Length: 44 bytes (11)
	Flags: 0x002 (SYN)
	000. .... .... = Reserved: Not set
	...0 .... .... = Nonce: Not set
	.... 0... .... = Congestion Window Reduced (CWR): Not set
	.... .0.. .... = ECN-Echo: Not set
	.... ..0. .... = Urgent: Not set
	.... ...0 .... = Acknowledgment: Not set
	.... .... 0... = Push: Not set
	.... .... .0.. = Reset: Not set
	.... .... ..1. = Syn: Set
	Expert Info (Chat/Sequence): Connection establish request (SYN): server port 5037
	Connection establish request (SYN): server port 5037
	Severity level: Chat
	Group: Sequence
	.... .... ...0 = Fin: Not set
	TCP Flags: \xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7S\xc2\xb7
	Window size value: 65535
	Calculated window size: 65535
	Checksum: 0xfe34 [unverified]
	Checksum Status: Unverified
	Urgent pointer: 0
	Options: (24 bytes), Maximum segment size, No-Operation (NOP), Window scale, No-Operation (NOP), No-Operation (NOP), Timestamps, SACK permitted, End of Option List (EOL)
	TCP Option - Maximum segment size: 16344 bytes
	Kind: Maximum Segment Size (2)
	Length: 4
	MSS Value: 16344
	TCP Option - No-Operation (NOP)
	TCP Option - Window scale: 6 (multiply by 64)
	Shift count: 6
	Multiplier: 64
	TCP Option - Timestamps: TSval 1759938701, TSecr 0
	Timestamp value: 1759938701
	Timestamp echo reply: 0
	TCP Option - SACK permitted
	TCP Option - End of Option List (EOL)
	Timestamps
	Time since first frame in this TCP stream: 0.000000000 seconds
	Time since previous frame in this TCP stream: 0.000000000 seconds
	Kind: No-Operation (1)
	Kind: Window Scale (3)
	Kind: No-Operation (1)
	Kind: No-Operation (1)
	Kind: Time Stamp Option (8)
	Kind: SACK Permitted (4)
	Kind: End of Option List (0)
	Length: 3
	Length: 10
	Length: 2
	TCP Option - No-Operation (NOP)
	TCP Option - No-Operation (NOP)</msg>
<status status="PASS" starttime="20200715 20:31:22.816" endtime="20200715 20:31:28.190"></status>
</kw>
<msg timestamp="20200715 20:31:28.190" level="INFO">${WIRESHARK_LIVE_CAPTURE_OUTPUT} = Packet (Length: 68)
Layer NULL:
	Family: IP (2)
Layer IP:
	0100 .... = Version: 4
	.... 0101 = Header Length: 20 bytes (5)
	Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)
	0000 00.. = D...</msg>
<status status="PASS" starttime="20200715 20:31:22.815" endtime="20200715 20:31:28.190"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${WIRESHARK_LIVE_CAPTURE_OUTPUT}</arg>
</arguments>
<assign>
<var>${WIRESHARK_LIVE_CAPTURE_RESULT}</var>
</assign>
<msg timestamp="20200715 20:31:28.192" level="INFO">${WIRESHARK_LIVE_CAPTURE_RESULT} = Packet (Length: 68)
Layer NULL:
	Family: IP (2)
Layer IP:
	0100 .... = Version: 4
	.... 0101 = Header Length: 20 bytes (5)
	Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)
	0000 00.. = D...</msg>
<status status="PASS" starttime="20200715 20:31:28.191" endtime="20200715 20:31:28.192"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${WIRESHARK_LIVE_CAPTURE_RESULT}</arg>
</arguments>
<msg timestamp="20200715 20:31:28.192" level="INFO">Packet (Length: 68)
Layer NULL:
	Family: IP (2)
Layer IP:
	0100 .... = Version: 4
	.... 0101 = Header Length: 20 bytes (5)
	Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)
	0000 00.. = Differentiated Services Codepoint: Default (0)
	.... ..00 = Explicit Congestion Notification: Not ECN-Capable Transport (0)
	Total Length: 64
	Identification: 0x0000 (0)
	Flags: 0x4000, Don't fragment
	0... .... .... .... = Reserved bit: Not set
	.1.. .... .... .... = Don't fragment: Set
	..0. .... .... .... = More fragments: Not set
	Fragment offset: 0
	Time to live: 64
	Protocol: TCP (6)
	Header checksum: 0x0000 [validation disabled]
	Header checksum status: Unverified
	Source: 127.0.0.1
	Destination: 127.0.0.1
Layer TCP:
	Source Port: 49676
	Destination Port: 5037
	Stream index: 0
	TCP Segment Len: 0
	Sequence number: 0    (relative sequence number)
	Sequence number (raw): 1852668699
	Next sequence number: 1    (relative sequence number)
	Acknowledgment number: 0
	Acknowledgment number (raw): 0
	1011 .... = Header Length: 44 bytes (11)
	Flags: 0x002 (SYN)
	000. .... .... = Reserved: Not set
	...0 .... .... = Nonce: Not set
	.... 0... .... = Congestion Window Reduced (CWR): Not set
	.... .0.. .... = ECN-Echo: Not set
	.... ..0. .... = Urgent: Not set
	.... ...0 .... = Acknowledgment: Not set
	.... .... 0... = Push: Not set
	.... .... .0.. = Reset: Not set
	.... .... ..1. = Syn: Set
	Expert Info (Chat/Sequence): Connection establish request (SYN): server port 5037
	Connection establish request (SYN): server port 5037
	Severity level: Chat
	Group: Sequence
	.... .... ...0 = Fin: Not set
	TCP Flags: \xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7\xc2\xb7S\xc2\xb7
	Window size value: 65535
	Calculated window size: 65535
	Checksum: 0xfe34 [unverified]
	Checksum Status: Unverified
	Urgent pointer: 0
	Options: (24 bytes), Maximum segment size, No-Operation (NOP), Window scale, No-Operation (NOP), No-Operation (NOP), Timestamps, SACK permitted, End of Option List (EOL)
	TCP Option - Maximum segment size: 16344 bytes
	Kind: Maximum Segment Size (2)
	Length: 4
	MSS Value: 16344
	TCP Option - No-Operation (NOP)
	TCP Option - Window scale: 6 (multiply by 64)
	Shift count: 6
	Multiplier: 64
	TCP Option - Timestamps: TSval 1759938701, TSecr 0
	Timestamp value: 1759938701
	Timestamp echo reply: 0
	TCP Option - SACK permitted
	TCP Option - End of Option List (EOL)
	Timestamps
	Time since first frame in this TCP stream: 0.000000000 seconds
	Time since previous frame in this TCP stream: 0.000000000 seconds
	Kind: No-Operation (1)
	Kind: Window Scale (3)
	Kind: No-Operation (1)
	Kind: No-Operation (1)
	Kind: Time Stamp Option (8)
	Kind: SACK Permitted (4)
	Kind: End of Option List (0)
	Length: 3
	Length: 10
	Length: 2
	TCP Option - No-Operation (NOP)
	TCP Option - No-Operation (NOP)
</msg>
<status status="PASS" starttime="20200715 20:31:28.192" endtime="20200715 20:31:28.192"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${WIRESHARK_LIVE_CAPTURE_RESULT}</arg>
<arg>Layer</arg>
</arguments>
<status status="PASS" starttime="20200715 20:31:28.192" endtime="20200715 20:31:28.193"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:22.815" endtime="20200715 20:31:28.193"></status>
</kw>
<kw name="Close Applications And Terminate Wireshark Processes" type="teardown">
<kw name="Close All Applications" library="AppiumLibrary">
<doc>Closes all open applications.</doc>
<status status="PASS" starttime="20200715 20:31:28.194" endtime="20200715 20:31:29.279"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Terminate Wireshark Processes Multiple Times</arg>
</arguments>
<kw name="Terminate Wireshark Processes Multiple Times">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Repeat Keyword</arg>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<msg timestamp="20200715 20:31:29.281" level="INFO">Repeating keyword, round 1/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:31:29.281" endtime="20200715 20:31:29.383"></status>
</kw>
<msg timestamp="20200715 20:31:29.383" level="INFO">Repeating keyword, round 2/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:31:29.383" endtime="20200715 20:31:29.479"></status>
</kw>
<msg timestamp="20200715 20:31:29.479" level="INFO">Repeating keyword, round 3/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:31:29.479" endtime="20200715 20:31:29.574"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:29.280" endtime="20200715 20:31:29.574"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:29.280" endtime="20200715 20:31:29.574"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall tshark</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall tshark</arg>
</arguments>
<msg timestamp="20200715 20:31:29.578" level="INFO">Running command 'killall tshark 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:31:29.575" endtime="20200715 20:31:29.593"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:29.575" endtime="20200715 20:31:29.593"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20200715 20:31:34.594" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20200715 20:31:29.593" endtime="20200715 20:31:34.594"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:29.280" endtime="20200715 20:31:34.595"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:29.279" endtime="20200715 20:31:34.595"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:28.193" endtime="20200715 20:31:34.595"></status>
</kw>
<tags>
<tag>Mobile_Safari</tag>
<tag>Wireshark</tag>
<tag>Wireshark_IOS</tag>
</tags>
<status status="PASS" starttime="20200715 20:31:03.239" endtime="20200715 20:31:34.596" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="Go to a YouTube page in an iOS mobile browser while Wireshark is capturing packets, then run a Lua script to analyze the results.">
<kw name="Navigate To Website Using Safari Then Run Wireshark" type="setup">
<kw name="Terminate Wireshark Processes Multiple Times">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Repeat Keyword</arg>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<msg timestamp="20200715 20:31:34.601" level="INFO">Repeating keyword, round 1/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:31:34.601" endtime="20200715 20:31:34.703"></status>
</kw>
<msg timestamp="20200715 20:31:34.703" level="INFO">Repeating keyword, round 2/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:31:34.704" endtime="20200715 20:31:34.798"></status>
</kw>
<msg timestamp="20200715 20:31:34.798" level="INFO">Repeating keyword, round 3/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:31:34.799" endtime="20200715 20:31:34.889"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:34.600" endtime="20200715 20:31:34.890"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:34.600" endtime="20200715 20:31:34.890"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall tshark</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall tshark</arg>
</arguments>
<msg timestamp="20200715 20:31:34.893" level="INFO">Running command 'killall tshark 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:31:34.890" endtime="20200715 20:31:34.908"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:34.890" endtime="20200715 20:31:34.909"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20200715 20:31:39.910" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20200715 20:31:34.909" endtime="20200715 20:31:39.911"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:34.599" endtime="20200715 20:31:39.911"></status>
</kw>
<kw name="Open The Safari Browser In IOS After Wireshark Clean Up">
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
<arg>%{PARALLEL_APPIUM_REMOTE_URL1}</arg>
</arguments>
<msg timestamp="20200715 20:31:39.914" level="INFO">${PARALLEL_APPIUM_REMOTE_URL} = http://localhost:4723/wd/hub</msg>
<status status="PASS" starttime="20200715 20:31:39.913" endtime="20200715 20:31:39.914"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${DEVICE_NAME_IOS}</arg>
<arg>%{DEVICE_NAME1_IOS}</arg>
</arguments>
<msg timestamp="20200715 20:31:39.915" level="INFO">${DEVICE_NAME_IOS} = iPhone X</msg>
<status status="PASS" starttime="20200715 20:31:39.915" endtime="20200715 20:31:39.916"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_PORT}</arg>
<arg>%{PARALLEL_APPIUM_PORT1}</arg>
</arguments>
<msg timestamp="20200715 20:31:39.916" level="INFO">${PARALLEL_APPIUM_PORT} = 4723</msg>
<status status="PASS" starttime="20200715 20:31:39.916" endtime="20200715 20:31:39.917"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_WDALOCALPORT}</arg>
<arg>%{PARALLEL_APPIUM_WDALOCALPORT1}</arg>
</arguments>
<msg timestamp="20200715 20:31:39.917" level="INFO">${PARALLEL_APPIUM_WDALOCALPORT} = 8100</msg>
<status status="PASS" starttime="20200715 20:31:39.917" endtime="20200715 20:31:39.917"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
</arguments>
<msg timestamp="20200715 20:31:39.918" level="INFO">Length is 28</msg>
<status status="PASS" starttime="20200715 20:31:39.918" endtime="20200715 20:31:39.918"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${DEVICE_NAME_IOS}</arg>
</arguments>
<msg timestamp="20200715 20:31:39.919" level="INFO">Length is 8</msg>
<status status="PASS" starttime="20200715 20:31:39.918" endtime="20200715 20:31:39.919"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_PORT}</arg>
</arguments>
<msg timestamp="20200715 20:31:39.919" level="INFO">Length is 4</msg>
<status status="PASS" starttime="20200715 20:31:39.919" endtime="20200715 20:31:39.919"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PARALLEL_APPIUM_WDALOCALPORT}</arg>
</arguments>
<msg timestamp="20200715 20:31:39.920" level="INFO">Length is 4</msg>
<status status="PASS" starttime="20200715 20:31:39.919" endtime="20200715 20:31:39.920"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Set Up Safari In IOS Before Starting Wireshark</arg>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
<arg>${DEVICE_NAME_IOS}</arg>
<arg>${PARALLEL_APPIUM_PORT}</arg>
<arg>${PARALLEL_APPIUM_WDALOCALPORT}</arg>
<arg>${WIRESHARK_APPIUM_EXAMPLE_URL}</arg>
</arguments>
<kw name="Set Up Safari In IOS Before Starting Wireshark" library="Appium-Mobile-Resources">
<arguments>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
<arg>${DEVICE_NAME_IOS}</arg>
<arg>${PARALLEL_APPIUM_PORT}</arg>
<arg>${PARALLEL_APPIUM_WDALOCALPORT}</arg>
<arg>${WIRESHARK_APPIUM_EXAMPLE_URL}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ps aux | grep "[t]shark"</arg>
<arg>alias=wireshark_mac_os_status</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20200715 20:31:39.923" level="INFO">Starting process:
ps aux | grep "[t]shark"</msg>
<msg timestamp="20200715 20:31:39.928" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200715 20:31:40.131" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20200715 20:31:39.922" endtime="20200715 20:31:40.132"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>wireshark_mac_os_status</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${WIRESHARK_MAC_OS_STATUS}</var>
</assign>
<msg timestamp="20200715 20:31:40.134" level="INFO">${WIRESHARK_MAC_OS_STATUS} = </msg>
<status status="PASS" starttime="20200715 20:31:40.133" endtime="20200715 20:31:40.134"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${WIRESHARK_MAC_OS_STATUS}</arg>
</arguments>
<msg timestamp="20200715 20:31:40.135" level="INFO"></msg>
<status status="PASS" starttime="20200715 20:31:40.134" endtime="20200715 20:31:40.135"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${WIRESHARK_MAC_OS_STATUS}</arg>
<arg>tshark</arg>
</arguments>
<status status="PASS" starttime="20200715 20:31:40.135" endtime="20200715 20:31:40.136"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Open Application</arg>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
<arg>platformName=${PLATFORM_NAME_IOS}</arg>
<arg>platformVersion=${PLATFORM_VERSION_IOS}</arg>
<arg>devicetype=simulator</arg>
<arg>deviceName=${DEVICE_NAME_IOS}</arg>
<arg>PORT=${PARALLEL_APPIUM_PORT}</arg>
<arg>WDALOCALPORT=${PARALLEL_APPIUM_WDALOCALPORT}</arg>
<arg>automationName=${IOS_AUTOMATION_NAME}</arg>
<arg>startIWDP=true</arg>
<arg>browserName=Safari</arg>
<arg>bundleid=com.apple.mobilesafari</arg>
</arguments>
<kw name="Open Application" library="AppiumLibrary">
<doc>Opens a new application to given Appium server.
Capabilities of appium server, Android and iOS,
Please check https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/server-args.md
| *Option*            | *Man.* | *Description*     |
| remote_url          | Yes    | Appium server url |
| alias               | no     | alias             |</doc>
<arguments>
<arg>${PARALLEL_APPIUM_REMOTE_URL}</arg>
<arg>platformName=${PLATFORM_NAME_IOS}</arg>
<arg>platformVersion=${PLATFORM_VERSION_IOS}</arg>
<arg>devicetype=simulator</arg>
<arg>deviceName=${DEVICE_NAME_IOS}</arg>
<arg>PORT=${PARALLEL_APPIUM_PORT}</arg>
<arg>WDALOCALPORT=${PARALLEL_APPIUM_WDALOCALPORT}</arg>
<arg>automationName=${IOS_AUTOMATION_NAME}</arg>
<arg>startIWDP=true</arg>
<arg>browserName=Safari</arg>
<arg>bundleid=com.apple.mobilesafari</arg>
</arguments>
<status status="PASS" starttime="20200715 20:31:40.137" endtime="20200715 20:31:44.360"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:40.137" endtime="20200715 20:31:44.360"></status>
</kw>
<kw name="Go To Url" library="AppiumLibrary">
<doc>Opens URL in default web browser.</doc>
<arguments>
<arg>${WIRESHARK_APPIUM_EXAMPLE_URL}</arg>
</arguments>
<status status="PASS" starttime="20200715 20:31:44.360" endtime="20200715 20:31:45.879"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4s</arg>
</arguments>
<msg timestamp="20200715 20:31:49.881" level="INFO">Slept 4 seconds</msg>
<status status="PASS" starttime="20200715 20:31:45.880" endtime="20200715 20:31:49.882"></status>
</kw>
<timeout value="4 minutes"></timeout>
<status status="PASS" starttime="20200715 20:31:39.921" endtime="20200715 20:31:49.882"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:39.920" endtime="20200715 20:31:49.882"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:39.912" endtime="20200715 20:31:49.882"></status>
</kw>
<kw name="Go To Url" library="AppiumLibrary">
<doc>Opens URL in default web browser.</doc>
<arguments>
<arg>https://www.youtube.com/watch?v=0yEnJt6Sf50&amp;list=PLSK6YK5OGX1AZMAffD8EiTDq0lfzshRNg&amp;autoplay=1</arg>
</arguments>
<status status="PASS" starttime="20200715 20:31:49.883" endtime="20200715 20:31:56.979"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:34.599" endtime="20200715 20:31:56.979"></status>
</kw>
<kw name="Run Wireshark Lua Script And Check The Output">
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Wireshark Lua Script</arg>
<arg>wireshark_lua_script.lua</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${WIRESHARK_LUA_SCRIPT_OUTPUT}</var>
</assign>
<kw name="Wireshark Lua Script" library="WiresharkExample">
<arguments>
<arg>wireshark_lua_script.lua</arg>
<arg>2</arg>
</arguments>
<msg timestamp="20200715 20:31:57.680" level="INFO">/Users/jgorospe/Documents/GitHub/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019-Web-Proxies-Network-Packet-Analyzers/Workshop-Examples/Tests/Workshop-Part-Two/Resources/wireshark_lua_script.lua</msg>
<status status="PASS" starttime="20200715 20:31:56.981" endtime="20200715 20:31:57.681"></status>
</kw>
<msg timestamp="20200715 20:31:57.682" level="INFO">${WIRESHARK_LUA_SCRIPT_OUTPUT} =     1   0.000000 63.117.14.19 \xe2\x86\x92 192.168.1.151 SSL 1514 Continuation Data
    2   0.000003 63.117.14.19 \xe2\x86\x92 192.168.1.151 SSL 1514 Continuation Data
Number of packets captured for a...</msg>
<status status="PASS" starttime="20200715 20:31:56.980" endtime="20200715 20:31:57.682"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${WIRESHARK_LUA_SCRIPT_OUTPUT}</arg>
</arguments>
<assign>
<var>${WIRESHARK_LUA_SCRIPT_RESULT}</var>
</assign>
<msg timestamp="20200715 20:31:57.683" level="INFO">${WIRESHARK_LUA_SCRIPT_RESULT} =     1   0.000000 63.117.14.19 \xe2\x86\x92 192.168.1.151 SSL 1514 Continuation Data
    2   0.000003 63.117.14.19 \xe2\x86\x92 192.168.1.151 SSL 1514 Continuation Data
Number of packets captured for a...</msg>
<status status="PASS" starttime="20200715 20:31:57.682" endtime="20200715 20:31:57.683"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${WIRESHARK_LUA_SCRIPT_RESULT}</arg>
</arguments>
<msg timestamp="20200715 20:31:57.683" level="INFO">    1   0.000000 63.117.14.19 \xe2\x86\x92 192.168.1.151 SSL 1514 Continuation Data
    2   0.000003 63.117.14.19 \xe2\x86\x92 192.168.1.151 SSL 1514 Continuation Data
Number of packets captured for a given IP address: 	2
</msg>
<status status="PASS" starttime="20200715 20:31:57.683" endtime="20200715 20:31:57.683"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${WIRESHARK_LUA_SCRIPT_RESULT}</arg>
<arg>Number of packets captured for a given IP address</arg>
</arguments>
<status status="PASS" starttime="20200715 20:31:57.683" endtime="20200715 20:31:57.684"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:56.980" endtime="20200715 20:31:57.684"></status>
</kw>
<kw name="Close Applications And Terminate Wireshark Processes" type="teardown">
<kw name="Close All Applications" library="AppiumLibrary">
<doc>Closes all open applications.</doc>
<status status="PASS" starttime="20200715 20:31:57.685" endtime="20200715 20:31:58.782"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Terminate Wireshark Processes Multiple Times</arg>
</arguments>
<kw name="Terminate Wireshark Processes Multiple Times">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Repeat Keyword</arg>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<msg timestamp="20200715 20:31:58.783" level="INFO">Repeating keyword, round 1/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:31:58.784" endtime="20200715 20:31:58.889"></status>
</kw>
<msg timestamp="20200715 20:31:58.889" level="INFO">Repeating keyword, round 2/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:31:58.890" endtime="20200715 20:31:59.000"></status>
</kw>
<msg timestamp="20200715 20:31:59.000" level="INFO">Repeating keyword, round 3/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:31:59.000" endtime="20200715 20:31:59.096"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:58.783" endtime="20200715 20:31:59.096"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:58.783" endtime="20200715 20:31:59.096"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall tshark</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall tshark</arg>
</arguments>
<msg timestamp="20200715 20:31:59.100" level="INFO">Running command 'killall tshark 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:31:59.097" endtime="20200715 20:31:59.116"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:59.096" endtime="20200715 20:31:59.116"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20200715 20:32:04.119" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20200715 20:31:59.116" endtime="20200715 20:32:04.120"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:58.782" endtime="20200715 20:32:04.120"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:58.782" endtime="20200715 20:32:04.120"></status>
</kw>
<status status="PASS" starttime="20200715 20:31:57.684" endtime="20200715 20:32:04.121"></status>
</kw>
<tags>
<tag>Mobile_Safari</tag>
<tag>Wireshark</tag>
<tag>Wireshark_IOS</tag>
</tags>
<status status="PASS" starttime="20200715 20:31:34.597" endtime="20200715 20:32:04.121" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="Decrypt a packet capture file with a wireshark-sslkeys.log file, then check the output.">
<kw name="Run Wireshark To Decrypt Captured SSL Traffic And Check The Output">
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Wireshark Decrypt Captured SSL Traffic</arg>
<arg>wireshark-packets-captured.cap</arg>
<arg>20</arg>
</arguments>
<assign>
<var>${WIRESHARK_DECRYPT_SSL_OUTPUT}</var>
</assign>
<kw name="Wireshark Decrypt Captured Ssl Traffic" library="WiresharkExample">
<arguments>
<arg>wireshark-packets-captured.cap</arg>
<arg>20</arg>
</arguments>
<msg timestamp="20200715 20:32:04.368" level="INFO">/Users/jgorospe/Documents/GitHub/Tool-Strategies-Lone-Testers-Test-Leadership-Congress-2019-Web-Proxies-Network-Packet-Analyzers/Workshop-Examples/Tests/Workshop-Part-Two/Resources/wireshark-sslkeys.log</msg>
<status status="PASS" starttime="20200715 20:32:04.125" endtime="20200715 20:32:04.369"></status>
</kw>
<msg timestamp="20200715 20:32:04.369" level="INFO">${WIRESHARK_DECRYPT_SSL_OUTPUT} =     1   0.000000 192.168.1.151 \xe2\x86\x92 17.33.9.65   TCP 1514 [TCP segment of a reassembled PDU]
    2   0.000002 192.168.1.151 \xe2\x86\x92 17.33.9.65   TLSv1.2 418 Application Data
    3   0.000...</msg>
<status status="PASS" starttime="20200715 20:32:04.125" endtime="20200715 20:32:04.369"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${WIRESHARK_DECRYPT_SSL_OUTPUT}</arg>
</arguments>
<assign>
<var>${WIRESHARK_DECRYPT_SSL_RESULT}</var>
</assign>
<msg timestamp="20200715 20:32:04.370" level="INFO">${WIRESHARK_DECRYPT_SSL_RESULT} =     1   0.000000 192.168.1.151 \xe2\x86\x92 17.33.9.65   TCP 1514 [TCP segment of a reassembled PDU]
    2   0.000002 192.168.1.151 \xe2\x86\x92 17.33.9.65   TLSv1.2 418 Application Data
    3   0.000...</msg>
<status status="PASS" starttime="20200715 20:32:04.369" endtime="20200715 20:32:04.370"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${WIRESHARK_DECRYPT_SSL_RESULT}</arg>
</arguments>
<msg timestamp="20200715 20:32:04.370" level="INFO">    1   0.000000 192.168.1.151 \xe2\x86\x92 17.33.9.65   TCP 1514 [TCP segment of a reassembled PDU]
    2   0.000002 192.168.1.151 \xe2\x86\x92 17.33.9.65   TLSv1.2 418 Application Data
    3   0.000002 192.168.1.151 \xe2\x86\x92 17.33.9.65   TLSv1.2 94 Application Data
    4   0.035744   17.33.9.65 \xe2\x86\x92 192.168.1.151 TCP 66 443 \xe2\x86\x92 49601 [ACK] Seq=1 Ack=1 Win=503 Len=0 SLE=1461 SRE=1825
    5   0.035749   17.33.9.65 \xe2\x86\x92 192.168.1.151 TCP 66 [TCP Dup ACK 4#1] 443 \xe2\x86\x92 49601 [ACK] Seq=1 Ack=1 Win=503 Len=0 SLE=1461 SRE=1865
    6   0.035750   17.33.9.65 \xe2\x86\x92 192.168.1.151 TCP 66 443 \xe2\x86\x92 49601 [ACK] Seq=1 Ack=1825 Win=496 Len=0 SLE=1461 SRE=1865
    7   0.035752   17.33.9.65 \xe2\x86\x92 192.168.1.151 TCP 64 443 \xe2\x86\x92 49601 [ACK] Seq=1 Ack=1865 Win=496 Len=0
    8   0.035753   17.33.9.65 \xe2\x86\x92 192.168.1.151 TLSv1.2 94 Application Data
</msg>
<status status="PASS" starttime="20200715 20:32:04.370" endtime="20200715 20:32:04.371"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${WIRESHARK_DECRYPT_SSL_RESULT}</arg>
<arg>TCP</arg>
</arguments>
<status status="PASS" starttime="20200715 20:32:04.371" endtime="20200715 20:32:04.371"></status>
</kw>
<status status="PASS" starttime="20200715 20:32:04.124" endtime="20200715 20:32:04.371"></status>
</kw>
<kw name="Terminate Wireshark Processes Multiple Times" type="teardown">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Repeat Keyword</arg>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>3 times</arg>
<arg>Terminate All Wireshark Processes</arg>
</arguments>
<msg timestamp="20200715 20:32:04.372" level="INFO">Repeating keyword, round 1/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:32:04.372" endtime="20200715 20:32:04.473"></status>
</kw>
<msg timestamp="20200715 20:32:04.473" level="INFO">Repeating keyword, round 2/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:32:04.474" endtime="20200715 20:32:04.567"></status>
</kw>
<msg timestamp="20200715 20:32:04.567" level="INFO">Repeating keyword, round 3/3.</msg>
<kw name="Terminate All Wireshark Processes" library="WiresharkExample">
<status status="PASS" starttime="20200715 20:32:04.567" endtime="20200715 20:32:04.659"></status>
</kw>
<status status="PASS" starttime="20200715 20:32:04.372" endtime="20200715 20:32:04.659"></status>
</kw>
<status status="PASS" starttime="20200715 20:32:04.372" endtime="20200715 20:32:04.659"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run</arg>
<arg>killall tshark</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>killall tshark</arg>
</arguments>
<msg timestamp="20200715 20:32:04.662" level="INFO">Running command 'killall tshark 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20200715 20:32:04.659" endtime="20200715 20:32:04.677"></status>
</kw>
<status status="PASS" starttime="20200715 20:32:04.659" endtime="20200715 20:32:04.678"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20200715 20:32:09.680" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20200715 20:32:04.678" endtime="20200715 20:32:09.680"></status>
</kw>
<status status="PASS" starttime="20200715 20:32:04.371" endtime="20200715 20:32:09.681"></status>
</kw>
<tags>
<tag>Mobile_Safari</tag>
<tag>Wireshark</tag>
<tag>Wireshark_IOS</tag>
</tags>
<status status="PASS" starttime="20200715 20:32:04.122" endtime="20200715 20:32:09.681" critical="yes"></status>
</test>
<doc>Simple example using Wireshark and AppiumLibrary.</doc>
<status status="PASS" starttime="20200715 20:30:13.415" endtime="20200715 20:32:09.683"></status>
</suite>
<status status="PASS" starttime="20200715 20:28:36.320" endtime="20200715 20:32:09.689"></status>
</suite>
<statistics>
<total>
<stat pass="8" fail="0">Critical Tests</stat>
<stat pass="8" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="4" fail="0">Desktop_Firefox</stat>
<stat pass="4" fail="0">Mobile_Safari</stat>
<stat pass="8" fail="0">Wireshark</stat>
<stat pass="4" fail="0">Wireshark_IOS</stat>
<stat pass="4" fail="0">Wireshark_MacOS</stat>
</tag>
<suite>
<stat pass="8" fail="0" id="s1" name="Robot Framework Wireshark Desktop And Mobile Browser Test Run">Robot Framework Wireshark Desktop And Mobile Browser Test Run</stat>
<stat pass="4" fail="0" id="s1-s1" name="Wireshark-Desktop-Example">Robot Framework Wireshark Desktop And Mobile Browser Test Run.Wireshark-Desktop-Example</stat>
<stat pass="4" fail="0" id="s1-s2" name="Wireshark-Mobile-Example">Robot Framework Wireshark Desktop And Mobile Browser Test Run.Wireshark-Mobile-Example</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
